/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  /** ISO8601 Date values */
  DirectusData_Date: any;
  /** BigInt value */
  DirectusData_GraphQLBigInt: any;
  /** A Float or a String */
  DirectusData_GraphQLStringOrFloat: any;
  /** Hashed string values */
  DirectusData_Hash: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  DirectusData_JSON: any;
  /** ISO8601 Date values */
  DirectusSystemData_Date: any;
  /** BigInt value */
  DirectusSystemData_GraphQLBigInt: any;
  /** A Float or a String */
  DirectusSystemData_GraphQLStringOrFloat: any;
  /** Hashed string values */
  DirectusSystemData_Hash: any;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  DirectusSystemData_JSON: any;
  /** Represents NULL values */
  DirectusSystemData_Void: any;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DirectusData = {
  readonly articles: ReadonlyArray<DirectusData_articles>;
  readonly articles_aggregated: ReadonlyArray<DirectusData_articles_aggregated>;
  readonly articles_by_id: Maybe<DirectusData_articles>;
};


type DirectusData_articlesArgs = {
  filter: InputMaybe<DirectusData_articles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_articles_aggregatedArgs = {
  filter: InputMaybe<DirectusData_articles_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_articles_by_idArgs = {
  id: Scalars['ID'];
};

type DirectusData_EventEnum =
  | 'create'
  | 'delete'
  | 'update';

type DirectusData_articles = {
  readonly body: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  readonly date_updated: Maybe<Scalars['DirectusData_Date']>;
  readonly date_updated_func: Maybe<DirectusData_datetime_functions>;
  readonly id: Scalars['ID'];
  readonly sort: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly user_created: Maybe<DirectusData_directus_users>;
  readonly user_updated: Maybe<DirectusData_directus_users>;
};


type DirectusData_articles_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_articles_user_updatedArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_articles_aggregated = {
  readonly avg: Maybe<DirectusData_articles_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusData_articles_aggregated_fields>;
  readonly count: Maybe<DirectusData_articles_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusData_articles_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusData_JSON']>;
  readonly max: Maybe<DirectusData_articles_aggregated_fields>;
  readonly min: Maybe<DirectusData_articles_aggregated_fields>;
  readonly sum: Maybe<DirectusData_articles_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusData_articles_aggregated_fields>;
};

type DirectusData_articles_aggregated_count = {
  readonly body: Maybe<Scalars['Int']>;
  readonly date_created: Maybe<Scalars['Int']>;
  readonly date_updated: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly sort: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
  readonly user_updated: Maybe<Scalars['Int']>;
};

type DirectusData_articles_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
  readonly sort: Maybe<Scalars['Float']>;
};

type DirectusData_articles_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_articles_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_articles_filter>>>;
  readonly body: InputMaybe<DirectusData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly date_updated: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_updated_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly id: InputMaybe<DirectusData_number_filter_operators>;
  readonly sort: InputMaybe<DirectusData_number_filter_operators>;
  readonly status: InputMaybe<DirectusData_string_filter_operators>;
  readonly title: InputMaybe<DirectusData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusData_directus_users_filter>;
  readonly user_updated: InputMaybe<DirectusData_directus_users_filter>;
};

type DirectusData_articles_mutated = {
  readonly data: Maybe<DirectusData_articles>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_boolean_filter_operators = {
  readonly _eq: InputMaybe<Scalars['Boolean']>;
  readonly _neq: InputMaybe<Scalars['Boolean']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusData_count_function_filter_operators = {
  readonly count: InputMaybe<DirectusData_number_filter_operators>;
};

type DirectusData_count_functions = {
  readonly count: Maybe<Scalars['Int']>;
};

type DirectusData_create_articles_input = {
  readonly body: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusData_Date']>;
  readonly date_updated: InputMaybe<Scalars['DirectusData_Date']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly sort: InputMaybe<Scalars['Int']>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusData_create_directus_users_input>;
  readonly user_updated: InputMaybe<DirectusData_create_directus_users_input>;
};

type DirectusData_create_directus_files_input = {
  readonly charset: InputMaybe<Scalars['String']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly duration: InputMaybe<Scalars['Int']>;
  readonly embed: InputMaybe<Scalars['String']>;
  readonly filename_disk: InputMaybe<Scalars['String']>;
  readonly filename_download: Scalars['String'];
  readonly filesize: InputMaybe<Scalars['DirectusData_GraphQLBigInt']>;
  readonly folder: InputMaybe<DirectusData_create_directus_folders_input>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly metadata: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly modified_by: InputMaybe<DirectusData_create_directus_users_input>;
  readonly modified_on: InputMaybe<Scalars['DirectusData_Date']>;
  readonly storage: Scalars['String'];
  readonly tags: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly uploaded_by: InputMaybe<DirectusData_create_directus_users_input>;
  readonly uploaded_on: InputMaybe<Scalars['DirectusData_Date']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type DirectusData_create_directus_folders_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: Scalars['String'];
  readonly parent: InputMaybe<DirectusData_create_directus_folders_input>;
};

type DirectusData_create_directus_roles_input = {
  readonly admin_access: Scalars['Boolean'];
  readonly app_access: InputMaybe<Scalars['Boolean']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly enforce_tfa: Scalars['Boolean'];
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly ip_access: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly name: Scalars['String'];
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_create_directus_users_input>>>;
};

type DirectusData_create_directus_users_input = {
  readonly auth_data: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly avatar: InputMaybe<DirectusData_create_directus_files_input>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly email_notifications: InputMaybe<Scalars['Boolean']>;
  readonly external_identifier: InputMaybe<Scalars['String']>;
  readonly first_name: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly language: InputMaybe<Scalars['String']>;
  readonly last_access: InputMaybe<Scalars['DirectusData_Date']>;
  readonly last_name: InputMaybe<Scalars['String']>;
  readonly last_page: InputMaybe<Scalars['String']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['DirectusData_Hash']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<DirectusData_create_directus_roles_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly tfa_secret: InputMaybe<Scalars['DirectusData_Hash']>;
  readonly theme: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly token: InputMaybe<Scalars['DirectusData_Hash']>;
};

type DirectusData_date_filter_operators = {
  readonly _between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _eq: InputMaybe<Scalars['String']>;
  readonly _gt: InputMaybe<Scalars['String']>;
  readonly _gte: InputMaybe<Scalars['String']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _lt: InputMaybe<Scalars['String']>;
  readonly _lte: InputMaybe<Scalars['String']>;
  readonly _nbetween: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _neq: InputMaybe<Scalars['String']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusData_datetime_function_filter_operators = {
  readonly day: InputMaybe<DirectusData_number_filter_operators>;
  readonly hour: InputMaybe<DirectusData_number_filter_operators>;
  readonly minute: InputMaybe<DirectusData_number_filter_operators>;
  readonly month: InputMaybe<DirectusData_number_filter_operators>;
  readonly second: InputMaybe<DirectusData_number_filter_operators>;
  readonly week: InputMaybe<DirectusData_number_filter_operators>;
  readonly weekday: InputMaybe<DirectusData_number_filter_operators>;
  readonly year: InputMaybe<DirectusData_number_filter_operators>;
};

type DirectusData_datetime_functions = {
  readonly day: Maybe<Scalars['Int']>;
  readonly hour: Maybe<Scalars['Int']>;
  readonly minute: Maybe<Scalars['Int']>;
  readonly month: Maybe<Scalars['Int']>;
  readonly second: Maybe<Scalars['Int']>;
  readonly week: Maybe<Scalars['Int']>;
  readonly weekday: Maybe<Scalars['Int']>;
  readonly year: Maybe<Scalars['Int']>;
};

type DirectusData_delete_many = {
  readonly ids: ReadonlyArray<Maybe<Scalars['ID']>>;
};

type DirectusData_delete_one = {
  readonly id: Scalars['ID'];
};

type DirectusData_directus_activity = {
  readonly action: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly comment: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ip: Maybe<Scalars['String']>;
  readonly item: Scalars['String'];
  readonly origin: Maybe<Scalars['String']>;
  readonly revisions: Maybe<ReadonlyArray<Maybe<DirectusData_directus_revisions>>>;
  readonly revisions_func: Maybe<DirectusData_count_functions>;
  readonly timestamp: Maybe<Scalars['DirectusData_Date']>;
  readonly timestamp_func: Maybe<DirectusData_datetime_functions>;
  readonly user: Maybe<DirectusData_directus_users>;
  readonly user_agent: Maybe<Scalars['String']>;
};


type DirectusData_directus_activity_revisionsArgs = {
  filter: InputMaybe<DirectusData_directus_revisions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_activity_userArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_activity_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_activity_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_activity_filter>>>;
  readonly action: InputMaybe<DirectusData_string_filter_operators>;
  readonly collection: InputMaybe<DirectusData_string_filter_operators>;
  readonly comment: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_number_filter_operators>;
  readonly ip: InputMaybe<DirectusData_string_filter_operators>;
  readonly item: InputMaybe<DirectusData_string_filter_operators>;
  readonly origin: InputMaybe<DirectusData_string_filter_operators>;
  readonly revisions: InputMaybe<DirectusData_directus_revisions_filter>;
  readonly revisions_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly timestamp: InputMaybe<DirectusData_date_filter_operators>;
  readonly timestamp_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly user: InputMaybe<DirectusData_directus_users_filter>;
  readonly user_agent: InputMaybe<DirectusData_string_filter_operators>;
};

type DirectusData_directus_activity_mutated = {
  readonly data: Maybe<DirectusData_directus_activity>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_dashboards = {
  readonly color: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly note: Maybe<Scalars['String']>;
  readonly panels: Maybe<ReadonlyArray<Maybe<DirectusData_directus_panels>>>;
  readonly panels_func: Maybe<DirectusData_count_functions>;
  readonly user_created: Maybe<DirectusData_directus_users>;
};


type DirectusData_directus_dashboards_panelsArgs = {
  filter: InputMaybe<DirectusData_directus_panels_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_dashboards_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_dashboards_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_dashboards_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_dashboards_filter>>>;
  readonly color: InputMaybe<DirectusData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly icon: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly note: InputMaybe<DirectusData_string_filter_operators>;
  readonly panels: InputMaybe<DirectusData_directus_panels_filter>;
  readonly panels_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly user_created: InputMaybe<DirectusData_directus_users_filter>;
};

type DirectusData_directus_dashboards_mutated = {
  readonly data: Maybe<DirectusData_directus_dashboards>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_files = {
  readonly charset: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly duration: Maybe<Scalars['Int']>;
  readonly embed: Maybe<Scalars['String']>;
  readonly filename_disk: Maybe<Scalars['String']>;
  readonly filename_download: Scalars['String'];
  readonly filesize: Maybe<Scalars['DirectusData_GraphQLBigInt']>;
  readonly folder: Maybe<DirectusData_directus_folders>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly imageFile: Maybe<File>;
  readonly location: Maybe<Scalars['String']>;
  readonly metadata: Maybe<Scalars['DirectusData_JSON']>;
  readonly metadata_func: Maybe<DirectusData_count_functions>;
  readonly modified_by: Maybe<DirectusData_directus_users>;
  readonly modified_on: Maybe<Scalars['DirectusData_Date']>;
  readonly modified_on_func: Maybe<DirectusData_datetime_functions>;
  readonly storage: Scalars['String'];
  readonly tags: Maybe<Scalars['DirectusData_JSON']>;
  readonly tags_func: Maybe<DirectusData_count_functions>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly uploaded_by: Maybe<DirectusData_directus_users>;
  readonly uploaded_on: Maybe<Scalars['DirectusData_Date']>;
  readonly uploaded_on_func: Maybe<DirectusData_datetime_functions>;
  readonly width: Maybe<Scalars['Int']>;
};


type DirectusData_directus_files_folderArgs = {
  filter: InputMaybe<DirectusData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_files_modified_byArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_files_uploaded_byArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_files_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_files_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_files_filter>>>;
  readonly charset: InputMaybe<DirectusData_string_filter_operators>;
  readonly description: InputMaybe<DirectusData_string_filter_operators>;
  readonly duration: InputMaybe<DirectusData_number_filter_operators>;
  readonly embed: InputMaybe<DirectusData_string_filter_operators>;
  readonly filename_disk: InputMaybe<DirectusData_string_filter_operators>;
  readonly filename_download: InputMaybe<DirectusData_string_filter_operators>;
  readonly filesize: InputMaybe<DirectusData_number_filter_operators>;
  readonly folder: InputMaybe<DirectusData_directus_folders_filter>;
  readonly height: InputMaybe<DirectusData_number_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly location: InputMaybe<DirectusData_string_filter_operators>;
  readonly metadata: InputMaybe<DirectusData_string_filter_operators>;
  readonly metadata_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly modified_by: InputMaybe<DirectusData_directus_users_filter>;
  readonly modified_on: InputMaybe<DirectusData_date_filter_operators>;
  readonly modified_on_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly storage: InputMaybe<DirectusData_string_filter_operators>;
  readonly tags: InputMaybe<DirectusData_string_filter_operators>;
  readonly tags_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly title: InputMaybe<DirectusData_string_filter_operators>;
  readonly type: InputMaybe<DirectusData_string_filter_operators>;
  readonly uploaded_by: InputMaybe<DirectusData_directus_users_filter>;
  readonly uploaded_on: InputMaybe<DirectusData_date_filter_operators>;
  readonly uploaded_on_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly width: InputMaybe<DirectusData_number_filter_operators>;
};

type DirectusData_directus_files_mutated = {
  readonly data: Maybe<DirectusData_directus_files>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_flows = {
  readonly accountability: Maybe<Scalars['String']>;
  readonly color: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly operation: Maybe<DirectusData_directus_operations>;
  readonly operations: Maybe<ReadonlyArray<Maybe<DirectusData_directus_operations>>>;
  readonly operations_func: Maybe<DirectusData_count_functions>;
  readonly options: Maybe<Scalars['DirectusData_JSON']>;
  readonly options_func: Maybe<DirectusData_count_functions>;
  readonly status: Maybe<Scalars['String']>;
  readonly trigger: Maybe<Scalars['String']>;
  readonly user_created: Maybe<DirectusData_directus_users>;
};


type DirectusData_directus_flows_operationArgs = {
  filter: InputMaybe<DirectusData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_flows_operationsArgs = {
  filter: InputMaybe<DirectusData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_flows_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_flows_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_flows_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_flows_filter>>>;
  readonly accountability: InputMaybe<DirectusData_string_filter_operators>;
  readonly color: InputMaybe<DirectusData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly description: InputMaybe<DirectusData_string_filter_operators>;
  readonly icon: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly operation: InputMaybe<DirectusData_directus_operations_filter>;
  readonly operations: InputMaybe<DirectusData_directus_operations_filter>;
  readonly operations_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly options: InputMaybe<DirectusData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly status: InputMaybe<DirectusData_string_filter_operators>;
  readonly trigger: InputMaybe<DirectusData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusData_directus_users_filter>;
};

type DirectusData_directus_flows_mutated = {
  readonly data: Maybe<DirectusData_directus_flows>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_folders = {
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly parent: Maybe<DirectusData_directus_folders>;
};


type DirectusData_directus_folders_parentArgs = {
  filter: InputMaybe<DirectusData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_folders_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_folders_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_folders_filter>>>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly parent: InputMaybe<DirectusData_directus_folders_filter>;
};

type DirectusData_directus_folders_mutated = {
  readonly data: Maybe<DirectusData_directus_folders>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_notifications = {
  readonly collection: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly item: Maybe<Scalars['String']>;
  readonly message: Maybe<Scalars['String']>;
  readonly recipient: Maybe<DirectusData_directus_users>;
  readonly sender: Maybe<DirectusData_directus_users>;
  readonly status: Maybe<Scalars['String']>;
  readonly subject: Scalars['String'];
  readonly timestamp: Maybe<Scalars['DirectusData_Date']>;
  readonly timestamp_func: Maybe<DirectusData_datetime_functions>;
};


type DirectusData_directus_notifications_recipientArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_notifications_senderArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_notifications_mutated = {
  readonly data: Maybe<DirectusData_directus_notifications>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_operations = {
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  readonly flow: Maybe<DirectusData_directus_flows>;
  readonly id: Scalars['ID'];
  readonly key: Scalars['String'];
  readonly name: Maybe<Scalars['String']>;
  readonly options: Maybe<Scalars['DirectusData_JSON']>;
  readonly options_func: Maybe<DirectusData_count_functions>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly reject: Maybe<DirectusData_directus_operations>;
  readonly resolve: Maybe<DirectusData_directus_operations>;
  readonly type: Scalars['String'];
  readonly user_created: Maybe<DirectusData_directus_users>;
};


type DirectusData_directus_operations_flowArgs = {
  filter: InputMaybe<DirectusData_directus_flows_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_operations_rejectArgs = {
  filter: InputMaybe<DirectusData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_operations_resolveArgs = {
  filter: InputMaybe<DirectusData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_operations_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_operations_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_operations_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_operations_filter>>>;
  readonly date_created: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly flow: InputMaybe<DirectusData_directus_flows_filter>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly key: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly options: InputMaybe<DirectusData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly position_x: InputMaybe<DirectusData_number_filter_operators>;
  readonly position_y: InputMaybe<DirectusData_number_filter_operators>;
  readonly reject: InputMaybe<DirectusData_directus_operations_filter>;
  readonly resolve: InputMaybe<DirectusData_directus_operations_filter>;
  readonly type: InputMaybe<DirectusData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusData_directus_users_filter>;
};

type DirectusData_directus_operations_mutated = {
  readonly data: Maybe<DirectusData_directus_operations>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_panels = {
  readonly color: Maybe<Scalars['String']>;
  readonly dashboard: Maybe<DirectusData_directus_dashboards>;
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  readonly height: Scalars['Int'];
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Maybe<Scalars['String']>;
  readonly note: Maybe<Scalars['String']>;
  readonly options: Maybe<Scalars['DirectusData_JSON']>;
  readonly options_func: Maybe<DirectusData_count_functions>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly show_header: Scalars['Boolean'];
  readonly type: Scalars['String'];
  readonly user_created: Maybe<DirectusData_directus_users>;
  readonly width: Scalars['Int'];
};


type DirectusData_directus_panels_dashboardArgs = {
  filter: InputMaybe<DirectusData_directus_dashboards_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_panels_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_panels_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_panels_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_panels_filter>>>;
  readonly color: InputMaybe<DirectusData_string_filter_operators>;
  readonly dashboard: InputMaybe<DirectusData_directus_dashboards_filter>;
  readonly date_created: InputMaybe<DirectusData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly height: InputMaybe<DirectusData_number_filter_operators>;
  readonly icon: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly note: InputMaybe<DirectusData_string_filter_operators>;
  readonly options: InputMaybe<DirectusData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly position_x: InputMaybe<DirectusData_number_filter_operators>;
  readonly position_y: InputMaybe<DirectusData_number_filter_operators>;
  readonly show_header: InputMaybe<DirectusData_boolean_filter_operators>;
  readonly type: InputMaybe<DirectusData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusData_directus_users_filter>;
  readonly width: InputMaybe<DirectusData_number_filter_operators>;
};

type DirectusData_directus_panels_mutated = {
  readonly data: Maybe<DirectusData_directus_panels>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_permissions = {
  readonly action: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly fields: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly id: Scalars['ID'];
  readonly permissions: Maybe<Scalars['DirectusData_JSON']>;
  readonly permissions_func: Maybe<DirectusData_count_functions>;
  readonly presets: Maybe<Scalars['DirectusData_JSON']>;
  readonly presets_func: Maybe<DirectusData_count_functions>;
  readonly role: Maybe<DirectusData_directus_roles>;
  readonly validation: Maybe<Scalars['DirectusData_JSON']>;
  readonly validation_func: Maybe<DirectusData_count_functions>;
};


type DirectusData_directus_permissions_roleArgs = {
  filter: InputMaybe<DirectusData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_permissions_mutated = {
  readonly data: Maybe<DirectusData_directus_permissions>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_presets = {
  readonly bookmark: Maybe<Scalars['String']>;
  readonly collection: Maybe<Scalars['String']>;
  readonly color: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['DirectusData_JSON']>;
  readonly filter_func: Maybe<DirectusData_count_functions>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly layout: Maybe<Scalars['String']>;
  readonly layout_options: Maybe<Scalars['DirectusData_JSON']>;
  readonly layout_options_func: Maybe<DirectusData_count_functions>;
  readonly layout_query: Maybe<Scalars['DirectusData_JSON']>;
  readonly layout_query_func: Maybe<DirectusData_count_functions>;
  readonly refresh_interval: Maybe<Scalars['Int']>;
  readonly role: Maybe<DirectusData_directus_roles>;
  readonly search: Maybe<Scalars['String']>;
  readonly user: Maybe<DirectusData_directus_users>;
};


type DirectusData_directus_presets_roleArgs = {
  filter: InputMaybe<DirectusData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_presets_userArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_presets_mutated = {
  readonly data: Maybe<DirectusData_directus_presets>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_revisions = {
  readonly activity: Maybe<DirectusData_directus_activity>;
  readonly collection: Scalars['String'];
  readonly data: Maybe<Scalars['DirectusData_JSON']>;
  readonly data_func: Maybe<DirectusData_count_functions>;
  readonly delta: Maybe<Scalars['DirectusData_JSON']>;
  readonly delta_func: Maybe<DirectusData_count_functions>;
  readonly id: Scalars['ID'];
  readonly item: Scalars['String'];
  readonly parent: Maybe<DirectusData_directus_revisions>;
};


type DirectusData_directus_revisions_activityArgs = {
  filter: InputMaybe<DirectusData_directus_activity_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_revisions_parentArgs = {
  filter: InputMaybe<DirectusData_directus_revisions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_revisions_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_revisions_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_revisions_filter>>>;
  readonly activity: InputMaybe<DirectusData_directus_activity_filter>;
  readonly collection: InputMaybe<DirectusData_string_filter_operators>;
  readonly data: InputMaybe<DirectusData_string_filter_operators>;
  readonly data_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly delta: InputMaybe<DirectusData_string_filter_operators>;
  readonly delta_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly id: InputMaybe<DirectusData_number_filter_operators>;
  readonly item: InputMaybe<DirectusData_string_filter_operators>;
  readonly parent: InputMaybe<DirectusData_directus_revisions_filter>;
};

type DirectusData_directus_revisions_mutated = {
  readonly data: Maybe<DirectusData_directus_revisions>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_roles = {
  readonly admin_access: Scalars['Boolean'];
  readonly app_access: Maybe<Scalars['Boolean']>;
  readonly description: Maybe<Scalars['String']>;
  readonly enforce_tfa: Scalars['Boolean'];
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ip_access: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly name: Scalars['String'];
  readonly users: Maybe<ReadonlyArray<Maybe<DirectusData_directus_users>>>;
  readonly users_func: Maybe<DirectusData_count_functions>;
};


type DirectusData_directus_roles_usersArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_roles_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_roles_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_roles_filter>>>;
  readonly admin_access: InputMaybe<DirectusData_boolean_filter_operators>;
  readonly app_access: InputMaybe<DirectusData_boolean_filter_operators>;
  readonly description: InputMaybe<DirectusData_string_filter_operators>;
  readonly enforce_tfa: InputMaybe<DirectusData_boolean_filter_operators>;
  readonly icon: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly ip_access: InputMaybe<DirectusData_string_filter_operators>;
  readonly name: InputMaybe<DirectusData_string_filter_operators>;
  readonly users: InputMaybe<DirectusData_directus_users_filter>;
  readonly users_func: InputMaybe<DirectusData_count_function_filter_operators>;
};

type DirectusData_directus_roles_mutated = {
  readonly data: Maybe<DirectusData_directus_roles>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_settings = {
  readonly auth_login_attempts: Maybe<Scalars['Int']>;
  readonly auth_password_policy: Maybe<Scalars['String']>;
  readonly basemaps: Maybe<Scalars['DirectusData_JSON']>;
  readonly basemaps_func: Maybe<DirectusData_count_functions>;
  readonly custom_aspect_ratios: Maybe<Scalars['DirectusData_JSON']>;
  readonly custom_aspect_ratios_func: Maybe<DirectusData_count_functions>;
  readonly custom_css: Maybe<Scalars['String']>;
  readonly default_language: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly mapbox_key: Maybe<Scalars['String']>;
  readonly module_bar: Maybe<Scalars['DirectusData_JSON']>;
  readonly module_bar_func: Maybe<DirectusData_count_functions>;
  /** $t:field_options.directus_settings.project_color_note */
  readonly project_color: Maybe<Scalars['String']>;
  readonly project_descriptor: Maybe<Scalars['String']>;
  readonly project_logo: Maybe<DirectusData_directus_files>;
  readonly project_name: Maybe<Scalars['String']>;
  readonly project_url: Maybe<Scalars['String']>;
  readonly public_background: Maybe<DirectusData_directus_files>;
  readonly public_foreground: Maybe<DirectusData_directus_files>;
  readonly public_note: Maybe<Scalars['String']>;
  readonly storage_asset_presets: Maybe<Scalars['DirectusData_JSON']>;
  readonly storage_asset_presets_func: Maybe<DirectusData_count_functions>;
  readonly storage_asset_transform: Maybe<Scalars['String']>;
  readonly storage_default_folder: Maybe<DirectusData_directus_folders>;
};


type DirectusData_directus_settings_project_logoArgs = {
  filter: InputMaybe<DirectusData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_settings_public_backgroundArgs = {
  filter: InputMaybe<DirectusData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_settings_public_foregroundArgs = {
  filter: InputMaybe<DirectusData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_settings_storage_default_folderArgs = {
  filter: InputMaybe<DirectusData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_settings_mutated = {
  readonly data: Maybe<DirectusData_directus_settings>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_shares = {
  readonly collection: Scalars['String'];
  readonly date_created: Maybe<Scalars['DirectusData_Date']>;
  readonly date_created_func: Maybe<DirectusData_datetime_functions>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_end: Maybe<Scalars['DirectusData_Date']>;
  readonly date_end_func: Maybe<DirectusData_datetime_functions>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_start: Maybe<Scalars['DirectusData_Date']>;
  readonly date_start_func: Maybe<DirectusData_datetime_functions>;
  readonly id: Scalars['ID'];
  readonly item: Scalars['String'];
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  readonly password: Maybe<Scalars['DirectusData_Hash']>;
  readonly role: Maybe<DirectusData_directus_roles>;
  readonly times_used: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<DirectusData_directus_users>;
};


type DirectusData_directus_shares_roleArgs = {
  filter: InputMaybe<DirectusData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_shares_user_createdArgs = {
  filter: InputMaybe<DirectusData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_shares_mutated = {
  readonly data: Maybe<DirectusData_directus_shares>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_translations = {
  readonly id: Scalars['ID'];
  readonly key: Scalars['String'];
  readonly language: Scalars['String'];
  readonly value: Scalars['String'];
};

type DirectusData_directus_translations_mutated = {
  readonly data: Maybe<DirectusData_directus_translations>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_users = {
  readonly auth_data: Maybe<Scalars['DirectusData_JSON']>;
  readonly auth_data_func: Maybe<DirectusData_count_functions>;
  readonly avatar: Maybe<DirectusData_directus_files>;
  readonly description: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly email_notifications: Maybe<Scalars['Boolean']>;
  readonly external_identifier: Maybe<Scalars['String']>;
  readonly first_name: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly language: Maybe<Scalars['String']>;
  readonly last_access: Maybe<Scalars['DirectusData_Date']>;
  readonly last_access_func: Maybe<DirectusData_datetime_functions>;
  readonly last_name: Maybe<Scalars['String']>;
  readonly last_page: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
  readonly password: Maybe<Scalars['DirectusData_Hash']>;
  readonly provider: Maybe<Scalars['String']>;
  readonly role: Maybe<DirectusData_directus_roles>;
  readonly status: Maybe<Scalars['String']>;
  readonly tags: Maybe<Scalars['DirectusData_JSON']>;
  readonly tags_func: Maybe<DirectusData_count_functions>;
  readonly tfa_secret: Maybe<Scalars['DirectusData_Hash']>;
  readonly theme: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly token: Maybe<Scalars['DirectusData_Hash']>;
};


type DirectusData_directus_users_avatarArgs = {
  filter: InputMaybe<DirectusData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusData_directus_users_roleArgs = {
  filter: InputMaybe<DirectusData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusData_directus_users_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_users_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_directus_users_filter>>>;
  readonly auth_data: InputMaybe<DirectusData_string_filter_operators>;
  readonly auth_data_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly avatar: InputMaybe<DirectusData_directus_files_filter>;
  readonly description: InputMaybe<DirectusData_string_filter_operators>;
  readonly email: InputMaybe<DirectusData_string_filter_operators>;
  readonly email_notifications: InputMaybe<DirectusData_boolean_filter_operators>;
  readonly external_identifier: InputMaybe<DirectusData_string_filter_operators>;
  readonly first_name: InputMaybe<DirectusData_string_filter_operators>;
  readonly id: InputMaybe<DirectusData_string_filter_operators>;
  readonly language: InputMaybe<DirectusData_string_filter_operators>;
  readonly last_access: InputMaybe<DirectusData_date_filter_operators>;
  readonly last_access_func: InputMaybe<DirectusData_datetime_function_filter_operators>;
  readonly last_name: InputMaybe<DirectusData_string_filter_operators>;
  readonly last_page: InputMaybe<DirectusData_string_filter_operators>;
  readonly location: InputMaybe<DirectusData_string_filter_operators>;
  readonly password: InputMaybe<DirectusData_hash_filter_operators>;
  readonly provider: InputMaybe<DirectusData_string_filter_operators>;
  readonly role: InputMaybe<DirectusData_directus_roles_filter>;
  readonly status: InputMaybe<DirectusData_string_filter_operators>;
  readonly tags: InputMaybe<DirectusData_string_filter_operators>;
  readonly tags_func: InputMaybe<DirectusData_count_function_filter_operators>;
  readonly tfa_secret: InputMaybe<DirectusData_hash_filter_operators>;
  readonly theme: InputMaybe<DirectusData_string_filter_operators>;
  readonly title: InputMaybe<DirectusData_string_filter_operators>;
  readonly token: InputMaybe<DirectusData_hash_filter_operators>;
};

type DirectusData_directus_users_mutated = {
  readonly data: Maybe<DirectusData_directus_users>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_directus_webhooks = {
  readonly actions: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly collections: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly data: Maybe<Scalars['Boolean']>;
  readonly headers: Maybe<Scalars['DirectusData_JSON']>;
  readonly headers_func: Maybe<DirectusData_count_functions>;
  readonly id: Scalars['ID'];
  readonly method: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly status: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
};

type DirectusData_directus_webhooks_mutated = {
  readonly data: Maybe<DirectusData_directus_webhooks>;
  readonly event: Maybe<DirectusData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusData_hash_filter_operators = {
  readonly _empty: InputMaybe<Scalars['Boolean']>;
  readonly _nempty: InputMaybe<Scalars['Boolean']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusData_number_filter_operators = {
  readonly _between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _eq: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _gt: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _gte: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _lt: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _lte: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _nbetween: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _neq: InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusData_GraphQLStringOrFloat']>>>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusData_string_filter_operators = {
  readonly _contains: InputMaybe<Scalars['String']>;
  readonly _empty: InputMaybe<Scalars['Boolean']>;
  readonly _ends_with: InputMaybe<Scalars['String']>;
  readonly _eq: InputMaybe<Scalars['String']>;
  readonly _icontains: InputMaybe<Scalars['String']>;
  readonly _iends_with: InputMaybe<Scalars['String']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _istarts_with: InputMaybe<Scalars['String']>;
  readonly _ncontains: InputMaybe<Scalars['String']>;
  readonly _nempty: InputMaybe<Scalars['Boolean']>;
  readonly _nends_with: InputMaybe<Scalars['String']>;
  readonly _neq: InputMaybe<Scalars['String']>;
  readonly _niends_with: InputMaybe<Scalars['String']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _nistarts_with: InputMaybe<Scalars['String']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _nstarts_with: InputMaybe<Scalars['String']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
  readonly _starts_with: InputMaybe<Scalars['String']>;
};

type DirectusData_update_articles_input = {
  readonly body: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusData_Date']>;
  readonly date_updated: InputMaybe<Scalars['DirectusData_Date']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly sort: InputMaybe<Scalars['Int']>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusData_update_directus_users_input>;
  readonly user_updated: InputMaybe<DirectusData_update_directus_users_input>;
};

type DirectusData_update_directus_files_input = {
  readonly charset: InputMaybe<Scalars['String']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly duration: InputMaybe<Scalars['Int']>;
  readonly embed: InputMaybe<Scalars['String']>;
  readonly filename_disk: InputMaybe<Scalars['String']>;
  readonly filename_download: InputMaybe<Scalars['String']>;
  readonly filesize: InputMaybe<Scalars['DirectusData_GraphQLBigInt']>;
  readonly folder: InputMaybe<DirectusData_update_directus_folders_input>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly metadata: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly modified_by: InputMaybe<DirectusData_update_directus_users_input>;
  readonly modified_on: InputMaybe<Scalars['DirectusData_Date']>;
  readonly storage: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly uploaded_by: InputMaybe<DirectusData_update_directus_users_input>;
  readonly uploaded_on: InputMaybe<Scalars['DirectusData_Date']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type DirectusData_update_directus_folders_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly parent: InputMaybe<DirectusData_update_directus_folders_input>;
};

type DirectusData_update_directus_roles_input = {
  readonly admin_access: InputMaybe<Scalars['Boolean']>;
  readonly app_access: InputMaybe<Scalars['Boolean']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly enforce_tfa: InputMaybe<Scalars['Boolean']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly ip_access: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<DirectusData_update_directus_users_input>>>;
};

type DirectusData_update_directus_users_input = {
  readonly auth_data: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly avatar: InputMaybe<DirectusData_update_directus_files_input>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly email_notifications: InputMaybe<Scalars['Boolean']>;
  readonly external_identifier: InputMaybe<Scalars['String']>;
  readonly first_name: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly language: InputMaybe<Scalars['String']>;
  readonly last_access: InputMaybe<Scalars['DirectusData_Date']>;
  readonly last_name: InputMaybe<Scalars['String']>;
  readonly last_page: InputMaybe<Scalars['String']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['DirectusData_Hash']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<DirectusData_update_directus_roles_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusData_JSON']>;
  readonly tfa_secret: InputMaybe<Scalars['DirectusData_Hash']>;
  readonly theme: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly token: InputMaybe<Scalars['DirectusData_Hash']>;
};

type DirectusGraphQLSource = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fieldName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly typeName: Maybe<Scalars['String']>;
};

type DirectusGraphQLSourceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectusGraphQLSourceEdge>;
  readonly group: ReadonlyArray<DirectusGraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<DirectusGraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectusGraphQLSourceConnection_distinctArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceConnection_groupArgs = {
  field: DirectusGraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectusGraphQLSourceConnection_maxArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceConnection_minArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceConnection_sumArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};

type DirectusGraphQLSourceEdge = {
  readonly next: Maybe<DirectusGraphQLSource>;
  readonly node: DirectusGraphQLSource;
  readonly previous: Maybe<DirectusGraphQLSource>;
};

type DirectusGraphQLSourceFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fieldName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly typeName: InputMaybe<FieldSelectorEnum>;
};

type DirectusGraphQLSourceFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fieldName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly typeName: InputMaybe<StringQueryOperatorInput>;
};

type DirectusGraphQLSourceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectusGraphQLSourceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectusGraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<DirectusGraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectusGraphQLSourceGroupConnection_distinctArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceGroupConnection_groupArgs = {
  field: DirectusGraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectusGraphQLSourceGroupConnection_maxArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceGroupConnection_minArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};


type DirectusGraphQLSourceGroupConnection_sumArgs = {
  field: DirectusGraphQLSourceFieldSelector;
};

type DirectusGraphQLSourceSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fieldName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly typeName: InputMaybe<SortOrderEnum>;
};

type DirectusSystemData = {
  readonly activity: ReadonlyArray<DirectusSystemData_directus_activity>;
  readonly activity_aggregated: ReadonlyArray<DirectusSystemData_directus_activity_aggregated>;
  readonly activity_by_id: Maybe<DirectusSystemData_directus_activity>;
  readonly collections: ReadonlyArray<DirectusSystemData_directus_collections>;
  readonly collections_by_name: Maybe<DirectusSystemData_directus_collections>;
  readonly dashboards: ReadonlyArray<DirectusSystemData_directus_dashboards>;
  readonly dashboards_aggregated: ReadonlyArray<DirectusSystemData_directus_dashboards_aggregated>;
  readonly dashboards_by_id: Maybe<DirectusSystemData_directus_dashboards>;
  readonly extensions: Maybe<DirectusSystemData_extensions>;
  readonly fields: ReadonlyArray<DirectusSystemData_directus_fields>;
  readonly fields_by_name: Maybe<DirectusSystemData_directus_fields>;
  readonly fields_in_collection: ReadonlyArray<DirectusSystemData_directus_fields>;
  readonly files: ReadonlyArray<DirectusSystemData_directus_files>;
  readonly files_aggregated: ReadonlyArray<DirectusSystemData_directus_files_aggregated>;
  readonly files_by_id: Maybe<DirectusSystemData_directus_files>;
  readonly flows: ReadonlyArray<DirectusSystemData_directus_flows>;
  readonly flows_aggregated: ReadonlyArray<DirectusSystemData_directus_flows_aggregated>;
  readonly flows_by_id: Maybe<DirectusSystemData_directus_flows>;
  readonly folders: ReadonlyArray<DirectusSystemData_directus_folders>;
  readonly folders_aggregated: ReadonlyArray<DirectusSystemData_directus_folders_aggregated>;
  readonly folders_by_id: Maybe<DirectusSystemData_directus_folders>;
  readonly notifications: ReadonlyArray<DirectusSystemData_directus_notifications>;
  readonly notifications_aggregated: ReadonlyArray<DirectusSystemData_directus_notifications_aggregated>;
  readonly notifications_by_id: Maybe<DirectusSystemData_directus_notifications>;
  readonly operations: ReadonlyArray<DirectusSystemData_directus_operations>;
  readonly operations_aggregated: ReadonlyArray<DirectusSystemData_directus_operations_aggregated>;
  readonly operations_by_id: Maybe<DirectusSystemData_directus_operations>;
  readonly panels: ReadonlyArray<DirectusSystemData_directus_panels>;
  readonly panels_aggregated: ReadonlyArray<DirectusSystemData_directus_panels_aggregated>;
  readonly panels_by_id: Maybe<DirectusSystemData_directus_panels>;
  readonly permissions: ReadonlyArray<DirectusSystemData_directus_permissions>;
  readonly permissions_aggregated: ReadonlyArray<DirectusSystemData_directus_permissions_aggregated>;
  readonly permissions_by_id: Maybe<DirectusSystemData_directus_permissions>;
  readonly presets: ReadonlyArray<DirectusSystemData_directus_presets>;
  readonly presets_aggregated: ReadonlyArray<DirectusSystemData_directus_presets_aggregated>;
  readonly presets_by_id: Maybe<DirectusSystemData_directus_presets>;
  readonly relations: ReadonlyArray<DirectusSystemData_directus_relations>;
  readonly relations_by_name: Maybe<DirectusSystemData_directus_relations>;
  readonly relations_in_collection: ReadonlyArray<DirectusSystemData_directus_relations>;
  readonly revisions: ReadonlyArray<DirectusSystemData_directus_revisions>;
  readonly revisions_aggregated: ReadonlyArray<DirectusSystemData_directus_revisions_aggregated>;
  readonly revisions_by_id: Maybe<DirectusSystemData_directus_revisions>;
  readonly roles: ReadonlyArray<DirectusSystemData_directus_roles>;
  readonly roles_aggregated: ReadonlyArray<DirectusSystemData_directus_roles_aggregated>;
  readonly roles_by_id: Maybe<DirectusSystemData_directus_roles>;
  readonly server_health: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly server_info: Maybe<DirectusSystemData_server_info>;
  readonly server_ping: Maybe<Scalars['String']>;
  readonly server_specs_graphql: Maybe<Scalars['String']>;
  readonly server_specs_oas: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly settings: Maybe<DirectusSystemData_directus_settings>;
  readonly shares: ReadonlyArray<DirectusSystemData_directus_shares>;
  readonly shares_aggregated: ReadonlyArray<DirectusSystemData_directus_shares_aggregated>;
  readonly shares_by_id: Maybe<DirectusSystemData_directus_shares>;
  readonly translations: ReadonlyArray<DirectusSystemData_directus_translations>;
  readonly translations_aggregated: ReadonlyArray<DirectusSystemData_directus_translations_aggregated>;
  readonly translations_by_id: Maybe<DirectusSystemData_directus_translations>;
  readonly users: ReadonlyArray<DirectusSystemData_directus_users>;
  readonly users_aggregated: ReadonlyArray<DirectusSystemData_directus_users_aggregated>;
  readonly users_by_id: Maybe<DirectusSystemData_directus_users>;
  readonly users_me: Maybe<DirectusSystemData_directus_users>;
  readonly webhooks: ReadonlyArray<DirectusSystemData_directus_webhooks>;
  readonly webhooks_aggregated: ReadonlyArray<DirectusSystemData_directus_webhooks_aggregated>;
  readonly webhooks_by_id: Maybe<DirectusSystemData_directus_webhooks>;
};


type DirectusSystemData_activityArgs = {
  filter: InputMaybe<DirectusSystemData_directus_activity_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_activity_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_activity_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_activity_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_collections_by_nameArgs = {
  name: Scalars['String'];
};


type DirectusSystemData_dashboardsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_dashboards_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_dashboards_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_dashboards_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_dashboards_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_fields_by_nameArgs = {
  collection: Scalars['String'];
  field: Scalars['String'];
};


type DirectusSystemData_fields_in_collectionArgs = {
  collection: Scalars['String'];
};


type DirectusSystemData_filesArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_files_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_files_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_flowsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_flows_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_flows_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_flows_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_flows_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_foldersArgs = {
  filter: InputMaybe<DirectusSystemData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_folders_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_folders_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_folders_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_notificationsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_notifications_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_notifications_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_notifications_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_notifications_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_operationsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_operations_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_operations_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_panelsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_panels_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_panels_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_panels_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_panels_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_permissionsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_permissions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_permissions_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_permissions_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_permissions_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_presetsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_presets_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_presets_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_presets_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_presets_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_relations_by_nameArgs = {
  collection: Scalars['String'];
  field: Scalars['String'];
};


type DirectusSystemData_relations_in_collectionArgs = {
  collection: Scalars['String'];
};


type DirectusSystemData_revisionsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_revisions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_revisions_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_revisions_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_revisions_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_rolesArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_roles_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_roles_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_server_specs_graphqlArgs = {
  scope: InputMaybe<DirectusSystemData_graphql_sdl_scope>;
};


type DirectusSystemData_sharesArgs = {
  filter: InputMaybe<DirectusSystemData_directus_shares_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_shares_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_shares_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_shares_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_translationsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_translations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_translations_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_translations_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_translations_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_usersArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_users_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_users_by_idArgs = {
  id: Scalars['ID'];
};


type DirectusSystemData_webhooksArgs = {
  filter: InputMaybe<DirectusSystemData_directus_webhooks_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_webhooks_aggregatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_webhooks_filter>;
  groupBy: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_webhooks_by_idArgs = {
  id: Scalars['ID'];
};

type DirectusSystemData_EventEnum =
  | 'create'
  | 'delete'
  | 'update';

type DirectusSystemData_articles = {
  readonly body: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly date_updated: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_updated_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly id: Scalars['ID'];
  readonly sort: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
  readonly user_updated: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_articles_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_articles_user_updatedArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_articles_mutated = {
  readonly data: Maybe<DirectusSystemData_articles>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_auth_mode =
  | 'cookie'
  | 'json';

type DirectusSystemData_auth_tokens = {
  readonly access_token: Maybe<Scalars['String']>;
  readonly expires: Maybe<Scalars['DirectusSystemData_GraphQLBigInt']>;
  readonly refresh_token: Maybe<Scalars['String']>;
};

type DirectusSystemData_boolean_filter_operators = {
  readonly _eq: InputMaybe<Scalars['Boolean']>;
  readonly _neq: InputMaybe<Scalars['Boolean']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusSystemData_count_function_filter_operators = {
  readonly count: InputMaybe<DirectusSystemData_number_filter_operators>;
};

type DirectusSystemData_count_functions = {
  readonly count: Maybe<Scalars['Int']>;
};

type DirectusSystemData_create_directus_collections_fields_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly field: InputMaybe<Scalars['String']>;
  readonly meta: InputMaybe<DirectusSystemData_directus_fields_meta_input>;
  readonly schema: InputMaybe<DirectusSystemData_directus_fields_schema_input>;
  readonly type: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_create_directus_collections_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly fields: InputMaybe<ReadonlyArray<DirectusSystemData_create_directus_collections_fields_input>>;
  readonly meta: InputMaybe<DirectusSystemData_directus_collections_meta_input>;
  readonly schema: InputMaybe<DirectusSystemData_directus_collections_schema_input>;
};

type DirectusSystemData_create_directus_dashboards_input = {
  readonly color: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: Scalars['String'];
  readonly note: InputMaybe<Scalars['String']>;
  readonly panels: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_create_directus_panels_input>>>;
  readonly user_created: InputMaybe<DirectusSystemData_create_directus_users_input>;
};

type DirectusSystemData_create_directus_fields_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly field: InputMaybe<Scalars['String']>;
  readonly meta: InputMaybe<DirectusSystemData_directus_fields_meta_input>;
  readonly schema: InputMaybe<DirectusSystemData_directus_fields_schema_input>;
  readonly type: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_create_directus_files_input = {
  readonly charset: InputMaybe<Scalars['String']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly duration: InputMaybe<Scalars['Int']>;
  readonly embed: InputMaybe<Scalars['String']>;
  readonly filename_disk: InputMaybe<Scalars['String']>;
  readonly filename_download: Scalars['String'];
  readonly filesize: InputMaybe<Scalars['DirectusSystemData_GraphQLBigInt']>;
  readonly folder: InputMaybe<DirectusSystemData_create_directus_folders_input>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly metadata: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly modified_by: InputMaybe<DirectusSystemData_create_directus_users_input>;
  readonly modified_on: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly storage: Scalars['String'];
  readonly tags: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly uploaded_by: InputMaybe<DirectusSystemData_create_directus_users_input>;
  readonly uploaded_on: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type DirectusSystemData_create_directus_flows_input = {
  readonly accountability: InputMaybe<Scalars['String']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: Scalars['String'];
  readonly operation: InputMaybe<DirectusSystemData_create_directus_operations_input>;
  readonly operations: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_create_directus_operations_input>>>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly trigger: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusSystemData_create_directus_users_input>;
};

type DirectusSystemData_create_directus_folders_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: Scalars['String'];
  readonly parent: InputMaybe<DirectusSystemData_create_directus_folders_input>;
};

type DirectusSystemData_create_directus_notifications_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly item: InputMaybe<Scalars['String']>;
  readonly message: InputMaybe<Scalars['String']>;
  readonly recipient: InputMaybe<DirectusSystemData_create_directus_users_input>;
  readonly sender: InputMaybe<DirectusSystemData_create_directus_users_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly subject: Scalars['String'];
  readonly timestamp: InputMaybe<Scalars['DirectusSystemData_Date']>;
};

type DirectusSystemData_create_directus_operations_input = {
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly flow: InputMaybe<DirectusSystemData_create_directus_flows_input>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly key: Scalars['String'];
  readonly name: InputMaybe<Scalars['String']>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly reject: InputMaybe<DirectusSystemData_create_directus_operations_input>;
  readonly resolve: InputMaybe<DirectusSystemData_create_directus_operations_input>;
  readonly type: Scalars['String'];
  readonly user_created: InputMaybe<DirectusSystemData_create_directus_users_input>;
};

type DirectusSystemData_create_directus_panels_input = {
  readonly color: InputMaybe<Scalars['String']>;
  readonly dashboard: InputMaybe<DirectusSystemData_create_directus_dashboards_input>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly height: Scalars['Int'];
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly note: InputMaybe<Scalars['String']>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly show_header: Scalars['Boolean'];
  readonly type: Scalars['String'];
  readonly user_created: InputMaybe<DirectusSystemData_create_directus_users_input>;
  readonly width: Scalars['Int'];
};

type DirectusSystemData_create_directus_permissions_input = {
  readonly action: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly permissions: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly presets: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly role: InputMaybe<DirectusSystemData_create_directus_roles_input>;
  readonly validation: InputMaybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_create_directus_presets_input = {
  readonly bookmark: InputMaybe<Scalars['String']>;
  readonly collection: InputMaybe<Scalars['String']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly filter: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly layout: InputMaybe<Scalars['String']>;
  readonly layout_options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly layout_query: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly refresh_interval: InputMaybe<Scalars['Int']>;
  readonly role: InputMaybe<DirectusSystemData_create_directus_roles_input>;
  readonly search: InputMaybe<Scalars['String']>;
  readonly user: InputMaybe<DirectusSystemData_create_directus_users_input>;
};

type DirectusSystemData_create_directus_relations_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly field: InputMaybe<Scalars['String']>;
  readonly meta: InputMaybe<DirectusSystemData_directus_relations_meta_input>;
  readonly related_collection: InputMaybe<Scalars['String']>;
  readonly schema: InputMaybe<DirectusSystemData_directus_relations_schema_input>;
};

type DirectusSystemData_create_directus_roles_input = {
  readonly admin_access: Scalars['Boolean'];
  readonly app_access: InputMaybe<Scalars['Boolean']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly enforce_tfa: Scalars['Boolean'];
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly ip_access: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly name: Scalars['String'];
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_create_directus_users_input>>>;
};

type DirectusSystemData_create_directus_shares_input = {
  readonly collection: Scalars['String'];
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_end: InputMaybe<Scalars['DirectusSystemData_Date']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_start: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly item: Scalars['String'];
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: InputMaybe<Scalars['Int']>;
  readonly name: InputMaybe<Scalars['String']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  readonly password: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly role: InputMaybe<DirectusSystemData_create_directus_roles_input>;
  readonly times_used: InputMaybe<Scalars['Int']>;
  readonly user_created: InputMaybe<DirectusSystemData_create_directus_users_input>;
};

type DirectusSystemData_create_directus_translations_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly key: Scalars['String'];
  readonly language: Scalars['String'];
  readonly value: Scalars['String'];
};

type DirectusSystemData_create_directus_users_input = {
  readonly auth_data: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly avatar: InputMaybe<DirectusSystemData_create_directus_files_input>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly email_notifications: InputMaybe<Scalars['Boolean']>;
  readonly external_identifier: InputMaybe<Scalars['String']>;
  readonly first_name: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly language: InputMaybe<Scalars['String']>;
  readonly last_access: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly last_name: InputMaybe<Scalars['String']>;
  readonly last_page: InputMaybe<Scalars['String']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<DirectusSystemData_create_directus_roles_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly tfa_secret: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly theme: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly token: InputMaybe<Scalars['DirectusSystemData_Hash']>;
};

type DirectusSystemData_create_directus_webhooks_input = {
  readonly actions: ReadonlyArray<InputMaybe<Scalars['String']>>;
  readonly collections: ReadonlyArray<InputMaybe<Scalars['String']>>;
  readonly data: InputMaybe<Scalars['Boolean']>;
  readonly headers: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly method: InputMaybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly status: InputMaybe<Scalars['String']>;
  readonly url: Scalars['String'];
};

type DirectusSystemData_date_filter_operators = {
  readonly _between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _eq: InputMaybe<Scalars['String']>;
  readonly _gt: InputMaybe<Scalars['String']>;
  readonly _gte: InputMaybe<Scalars['String']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _lt: InputMaybe<Scalars['String']>;
  readonly _lte: InputMaybe<Scalars['String']>;
  readonly _nbetween: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _neq: InputMaybe<Scalars['String']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusSystemData_datetime_function_filter_operators = {
  readonly day: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly hour: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly minute: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly month: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly second: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly week: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly weekday: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly year: InputMaybe<DirectusSystemData_number_filter_operators>;
};

type DirectusSystemData_datetime_functions = {
  readonly day: Maybe<Scalars['Int']>;
  readonly hour: Maybe<Scalars['Int']>;
  readonly minute: Maybe<Scalars['Int']>;
  readonly month: Maybe<Scalars['Int']>;
  readonly second: Maybe<Scalars['Int']>;
  readonly week: Maybe<Scalars['Int']>;
  readonly weekday: Maybe<Scalars['Int']>;
  readonly year: Maybe<Scalars['Int']>;
};

type DirectusSystemData_delete_collection = {
  readonly collection: Maybe<Scalars['String']>;
};

type DirectusSystemData_delete_field = {
  readonly collection: Maybe<Scalars['String']>;
  readonly field: Maybe<Scalars['String']>;
};

type DirectusSystemData_delete_many = {
  readonly ids: ReadonlyArray<Maybe<Scalars['ID']>>;
};

type DirectusSystemData_delete_one = {
  readonly id: Scalars['ID'];
};

type DirectusSystemData_delete_relation = {
  readonly collection: Maybe<Scalars['String']>;
  readonly field: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_activity = {
  readonly action: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly comment: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ip: Maybe<Scalars['String']>;
  readonly item: Scalars['String'];
  readonly origin: Maybe<Scalars['String']>;
  readonly revisions: Maybe<ReadonlyArray<Maybe<DirectusSystemData_directus_revisions>>>;
  readonly revisions_func: Maybe<DirectusSystemData_count_functions>;
  readonly timestamp: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly timestamp_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly user: Maybe<DirectusSystemData_directus_users>;
  readonly user_agent: Maybe<Scalars['String']>;
};


type DirectusSystemData_directus_activity_revisionsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_revisions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_activity_userArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_activity_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_activity_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_activity_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_activity_aggregated_fields>;
};

type DirectusSystemData_directus_activity_aggregated_count = {
  readonly action: Maybe<Scalars['Int']>;
  readonly collection: Maybe<Scalars['Int']>;
  readonly comment: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly ip: Maybe<Scalars['Int']>;
  readonly item: Maybe<Scalars['Int']>;
  readonly origin: Maybe<Scalars['Int']>;
  readonly revisions: Maybe<Scalars['Int']>;
  readonly timestamp: Maybe<Scalars['Int']>;
  readonly user: Maybe<Scalars['Int']>;
  readonly user_agent: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_activity_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_activity_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_activity_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_activity_filter>>>;
  readonly action: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly comment: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly ip: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly item: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly origin: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly revisions: InputMaybe<DirectusSystemData_directus_revisions_filter>;
  readonly revisions_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly timestamp: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly timestamp_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly user: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly user_agent: InputMaybe<DirectusSystemData_string_filter_operators>;
};

type DirectusSystemData_directus_activity_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_activity>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_collections = {
  readonly collection: Maybe<Scalars['String']>;
  readonly meta: Maybe<DirectusSystemData_directus_collections_meta>;
  readonly schema: Maybe<DirectusSystemData_directus_collections_schema>;
};

type DirectusSystemData_directus_collections_meta = {
  readonly accountability: Maybe<Scalars['String']>;
  readonly archive_app_filter: Scalars['Boolean'];
  readonly archive_field: Maybe<Scalars['String']>;
  readonly archive_value: Maybe<Scalars['String']>;
  readonly collapse: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly color: Maybe<Scalars['String']>;
  readonly display_template: Maybe<Scalars['String']>;
  readonly group: Maybe<Scalars['String']>;
  readonly hidden: Scalars['Boolean'];
  readonly icon: Maybe<Scalars['String']>;
  readonly item_duplication_fields: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly note: Maybe<Scalars['String']>;
  readonly preview_url: Maybe<Scalars['String']>;
  readonly singleton: Scalars['Boolean'];
  readonly sort: Maybe<Scalars['Int']>;
  readonly sort_field: Maybe<Scalars['String']>;
  readonly translations: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly unarchive_value: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_collections_meta_input = {
  readonly accountability: InputMaybe<Scalars['String']>;
  readonly archive_app_filter: Scalars['Boolean'];
  readonly archive_field: InputMaybe<Scalars['String']>;
  readonly archive_value: InputMaybe<Scalars['String']>;
  readonly collapse: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly color: InputMaybe<Scalars['String']>;
  readonly display_template: InputMaybe<Scalars['String']>;
  readonly group: InputMaybe<Scalars['String']>;
  readonly hidden: Scalars['Boolean'];
  readonly icon: InputMaybe<Scalars['String']>;
  readonly item_duplication_fields: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly note: InputMaybe<Scalars['String']>;
  readonly preview_url: InputMaybe<Scalars['String']>;
  readonly singleton: Scalars['Boolean'];
  readonly sort: InputMaybe<Scalars['Int']>;
  readonly sort_field: InputMaybe<Scalars['String']>;
  readonly translations: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly unarchive_value: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_directus_collections_schema = {
  readonly comment: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_collections_schema_input = {
  readonly comment: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_directus_dashboards = {
  readonly color: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly note: Maybe<Scalars['String']>;
  readonly panels: Maybe<ReadonlyArray<Maybe<DirectusSystemData_directus_panels>>>;
  readonly panels_func: Maybe<DirectusSystemData_count_functions>;
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_directus_dashboards_panelsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_panels_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_dashboards_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_dashboards_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_dashboards_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_dashboards_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_dashboards_aggregated_count = {
  readonly color: Maybe<Scalars['Int']>;
  readonly date_created: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly note: Maybe<Scalars['Int']>;
  readonly panels: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_dashboards_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_dashboards_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_dashboards_filter>>>;
  readonly color: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly icon: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly note: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly panels: InputMaybe<DirectusSystemData_directus_panels_filter>;
  readonly panels_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly user_created: InputMaybe<DirectusSystemData_directus_users_filter>;
};

type DirectusSystemData_directus_dashboards_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_dashboards>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_fields = {
  readonly collection: Maybe<Scalars['String']>;
  readonly field: Maybe<Scalars['String']>;
  readonly meta: Maybe<DirectusSystemData_directus_fields_meta>;
  readonly schema: Maybe<DirectusSystemData_directus_fields_schema>;
  readonly type: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_fields_meta = {
  readonly collection: Scalars['String'];
  readonly conditions: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly display: Maybe<Scalars['String']>;
  readonly display_options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly field: Scalars['String'];
  readonly group: Maybe<Scalars['String']>;
  readonly hidden: Scalars['Boolean'];
  readonly id: Scalars['Int'];
  readonly interface: Maybe<Scalars['String']>;
  readonly note: Maybe<Scalars['String']>;
  readonly options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly readonly: Scalars['Boolean'];
  readonly required: Maybe<Scalars['Boolean']>;
  readonly sort: Maybe<Scalars['Int']>;
  readonly special: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly translations: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly validation: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly validation_message: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_fields_meta_input = {
  readonly collection: Scalars['String'];
  readonly conditions: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly display: InputMaybe<Scalars['String']>;
  readonly display_options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly field: Scalars['String'];
  readonly group: InputMaybe<Scalars['String']>;
  readonly hidden: Scalars['Boolean'];
  readonly id: Scalars['Int'];
  readonly interface: InputMaybe<Scalars['String']>;
  readonly note: InputMaybe<Scalars['String']>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly readonly: Scalars['Boolean'];
  readonly required: InputMaybe<Scalars['Boolean']>;
  readonly sort: InputMaybe<Scalars['Int']>;
  readonly special: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly translations: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly validation: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly validation_message: InputMaybe<Scalars['String']>;
  readonly width: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_directus_fields_schema = {
  readonly comment: Maybe<Scalars['String']>;
  readonly data_type: Maybe<Scalars['String']>;
  readonly default_value: Maybe<Scalars['String']>;
  readonly foreign_key_column: Maybe<Scalars['String']>;
  readonly foreign_key_table: Maybe<Scalars['String']>;
  readonly has_auto_increment: Maybe<Scalars['Boolean']>;
  readonly is_nullable: Maybe<Scalars['Boolean']>;
  readonly is_primary_key: Maybe<Scalars['Boolean']>;
  readonly is_unique: Maybe<Scalars['Boolean']>;
  readonly max_length: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  readonly numeric_precision: Maybe<Scalars['Int']>;
  readonly numeric_scale: Maybe<Scalars['Int']>;
  readonly table: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_fields_schema_input = {
  readonly comment: InputMaybe<Scalars['String']>;
  readonly data_type: InputMaybe<Scalars['String']>;
  readonly default_value: InputMaybe<Scalars['String']>;
  readonly foreign_key_column: InputMaybe<Scalars['String']>;
  readonly foreign_key_table: InputMaybe<Scalars['String']>;
  readonly has_auto_increment: InputMaybe<Scalars['Boolean']>;
  readonly is_nullable: InputMaybe<Scalars['Boolean']>;
  readonly is_primary_key: InputMaybe<Scalars['Boolean']>;
  readonly is_unique: InputMaybe<Scalars['Boolean']>;
  readonly max_length: InputMaybe<Scalars['Int']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly numeric_precision: InputMaybe<Scalars['Int']>;
  readonly numeric_scale: InputMaybe<Scalars['Int']>;
  readonly table: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_directus_files = {
  readonly charset: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly duration: Maybe<Scalars['Int']>;
  readonly embed: Maybe<Scalars['String']>;
  readonly filename_disk: Maybe<Scalars['String']>;
  readonly filename_download: Scalars['String'];
  readonly filesize: Maybe<Scalars['DirectusSystemData_GraphQLBigInt']>;
  readonly folder: Maybe<DirectusSystemData_directus_folders>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly imageFile: Maybe<File>;
  readonly location: Maybe<Scalars['String']>;
  readonly metadata: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly metadata_func: Maybe<DirectusSystemData_count_functions>;
  readonly modified_by: Maybe<DirectusSystemData_directus_users>;
  readonly modified_on: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly modified_on_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly storage: Scalars['String'];
  readonly tags: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly tags_func: Maybe<DirectusSystemData_count_functions>;
  readonly title: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly uploaded_by: Maybe<DirectusSystemData_directus_users>;
  readonly uploaded_on: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly uploaded_on_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly width: Maybe<Scalars['Int']>;
};


type DirectusSystemData_directus_files_folderArgs = {
  filter: InputMaybe<DirectusSystemData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_files_modified_byArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_files_uploaded_byArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_files_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_files_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_files_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_files_aggregated_fields>;
};

type DirectusSystemData_directus_files_aggregated_count = {
  readonly charset: Maybe<Scalars['Int']>;
  readonly description: Maybe<Scalars['Int']>;
  readonly duration: Maybe<Scalars['Int']>;
  readonly embed: Maybe<Scalars['Int']>;
  readonly filename_disk: Maybe<Scalars['Int']>;
  readonly filename_download: Maybe<Scalars['Int']>;
  readonly filesize: Maybe<Scalars['Int']>;
  readonly folder: Maybe<Scalars['Int']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly location: Maybe<Scalars['Int']>;
  readonly metadata: Maybe<Scalars['Int']>;
  readonly modified_by: Maybe<Scalars['Int']>;
  readonly modified_on: Maybe<Scalars['Int']>;
  readonly storage: Maybe<Scalars['Int']>;
  readonly tags: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['Int']>;
  readonly uploaded_by: Maybe<Scalars['Int']>;
  readonly uploaded_on: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_files_aggregated_fields = {
  readonly duration: Maybe<Scalars['Float']>;
  readonly filesize: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Float']>;
  readonly width: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_files_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_files_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_files_filter>>>;
  readonly charset: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly description: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly duration: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly embed: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly filename_disk: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly filename_download: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly filesize: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly folder: InputMaybe<DirectusSystemData_directus_folders_filter>;
  readonly height: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly location: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly metadata: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly metadata_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly modified_by: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly modified_on: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly modified_on_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly storage: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly tags: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly tags_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly title: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly type: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly uploaded_by: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly uploaded_on: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly uploaded_on_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly width: InputMaybe<DirectusSystemData_number_filter_operators>;
};

type DirectusSystemData_directus_files_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_files>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_flows = {
  readonly accountability: Maybe<Scalars['String']>;
  readonly color: Maybe<Scalars['String']>;
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly description: Maybe<Scalars['String']>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly operation: Maybe<DirectusSystemData_directus_operations>;
  readonly operations: Maybe<ReadonlyArray<Maybe<DirectusSystemData_directus_operations>>>;
  readonly operations_func: Maybe<DirectusSystemData_count_functions>;
  readonly options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly options_func: Maybe<DirectusSystemData_count_functions>;
  readonly status: Maybe<Scalars['String']>;
  readonly trigger: Maybe<Scalars['String']>;
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_directus_flows_operationArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_flows_operationsArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_flows_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_flows_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_flows_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_flows_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_flows_aggregated_count = {
  readonly accountability: Maybe<Scalars['Int']>;
  readonly color: Maybe<Scalars['Int']>;
  readonly date_created: Maybe<Scalars['Int']>;
  readonly description: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly operation: Maybe<Scalars['Int']>;
  readonly operations: Maybe<Scalars['Int']>;
  readonly options: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['Int']>;
  readonly trigger: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_flows_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_flows_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_flows_filter>>>;
  readonly accountability: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly color: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly description: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly icon: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly operation: InputMaybe<DirectusSystemData_directus_operations_filter>;
  readonly operations: InputMaybe<DirectusSystemData_directus_operations_filter>;
  readonly operations_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly options: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly status: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly trigger: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusSystemData_directus_users_filter>;
};

type DirectusSystemData_directus_flows_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_flows>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_folders = {
  readonly id: Scalars['ID'];
  readonly name: Scalars['String'];
  readonly parent: Maybe<DirectusSystemData_directus_folders>;
};


type DirectusSystemData_directus_folders_parentArgs = {
  filter: InputMaybe<DirectusSystemData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_folders_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_folders_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_folders_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_folders_aggregated_count = {
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_folders_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_folders_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_folders_filter>>>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly parent: InputMaybe<DirectusSystemData_directus_folders_filter>;
};

type DirectusSystemData_directus_folders_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_folders>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_notifications = {
  readonly collection: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly item: Maybe<Scalars['String']>;
  readonly message: Maybe<Scalars['String']>;
  readonly recipient: Maybe<DirectusSystemData_directus_users>;
  readonly sender: Maybe<DirectusSystemData_directus_users>;
  readonly status: Maybe<Scalars['String']>;
  readonly subject: Scalars['String'];
  readonly timestamp: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly timestamp_func: Maybe<DirectusSystemData_datetime_functions>;
};


type DirectusSystemData_directus_notifications_recipientArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_notifications_senderArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_notifications_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_notifications_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_notifications_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_notifications_aggregated_fields>;
};

type DirectusSystemData_directus_notifications_aggregated_count = {
  readonly collection: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly item: Maybe<Scalars['Int']>;
  readonly message: Maybe<Scalars['Int']>;
  readonly recipient: Maybe<Scalars['Int']>;
  readonly sender: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['Int']>;
  readonly subject: Maybe<Scalars['Int']>;
  readonly timestamp: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_notifications_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_notifications_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_notifications_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_notifications_filter>>>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly item: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly message: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly recipient: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly sender: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly status: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly subject: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly timestamp: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly timestamp_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
};

type DirectusSystemData_directus_notifications_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_notifications>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_operations = {
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly flow: Maybe<DirectusSystemData_directus_flows>;
  readonly id: Scalars['ID'];
  readonly key: Scalars['String'];
  readonly name: Maybe<Scalars['String']>;
  readonly options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly options_func: Maybe<DirectusSystemData_count_functions>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly reject: Maybe<DirectusSystemData_directus_operations>;
  readonly resolve: Maybe<DirectusSystemData_directus_operations>;
  readonly type: Scalars['String'];
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_directus_operations_flowArgs = {
  filter: InputMaybe<DirectusSystemData_directus_flows_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_operations_rejectArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_operations_resolveArgs = {
  filter: InputMaybe<DirectusSystemData_directus_operations_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_operations_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_operations_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_operations_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_operations_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_operations_aggregated_fields>;
};

type DirectusSystemData_directus_operations_aggregated_count = {
  readonly date_created: Maybe<Scalars['Int']>;
  readonly flow: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly key: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly options: Maybe<Scalars['Int']>;
  readonly position_x: Maybe<Scalars['Int']>;
  readonly position_y: Maybe<Scalars['Int']>;
  readonly reject: Maybe<Scalars['Int']>;
  readonly resolve: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_operations_aggregated_fields = {
  readonly position_x: Maybe<Scalars['Float']>;
  readonly position_y: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_operations_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_operations_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_operations_filter>>>;
  readonly date_created: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly flow: InputMaybe<DirectusSystemData_directus_flows_filter>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly key: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly options: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly position_x: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly position_y: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly reject: InputMaybe<DirectusSystemData_directus_operations_filter>;
  readonly resolve: InputMaybe<DirectusSystemData_directus_operations_filter>;
  readonly type: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusSystemData_directus_users_filter>;
};

type DirectusSystemData_directus_operations_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_operations>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_panels = {
  readonly color: Maybe<Scalars['String']>;
  readonly dashboard: Maybe<DirectusSystemData_directus_dashboards>;
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly height: Scalars['Int'];
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly name: Maybe<Scalars['String']>;
  readonly note: Maybe<Scalars['String']>;
  readonly options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly options_func: Maybe<DirectusSystemData_count_functions>;
  readonly position_x: Scalars['Int'];
  readonly position_y: Scalars['Int'];
  readonly show_header: Scalars['Boolean'];
  readonly type: Scalars['String'];
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
  readonly width: Scalars['Int'];
};


type DirectusSystemData_directus_panels_dashboardArgs = {
  filter: InputMaybe<DirectusSystemData_directus_dashboards_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_panels_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_panels_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_panels_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_panels_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_panels_aggregated_fields>;
};

type DirectusSystemData_directus_panels_aggregated_count = {
  readonly color: Maybe<Scalars['Int']>;
  readonly dashboard: Maybe<Scalars['Int']>;
  readonly date_created: Maybe<Scalars['Int']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly note: Maybe<Scalars['Int']>;
  readonly options: Maybe<Scalars['Int']>;
  readonly position_x: Maybe<Scalars['Int']>;
  readonly position_y: Maybe<Scalars['Int']>;
  readonly show_header: Maybe<Scalars['Int']>;
  readonly type: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
  readonly width: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_panels_aggregated_fields = {
  readonly height: Maybe<Scalars['Float']>;
  readonly position_x: Maybe<Scalars['Float']>;
  readonly position_y: Maybe<Scalars['Float']>;
  readonly width: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_panels_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_panels_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_panels_filter>>>;
  readonly color: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly dashboard: InputMaybe<DirectusSystemData_directus_dashboards_filter>;
  readonly date_created: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly height: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly icon: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly note: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly options: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly options_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly position_x: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly position_y: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly show_header: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly type: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly user_created: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly width: InputMaybe<DirectusSystemData_number_filter_operators>;
};

type DirectusSystemData_directus_panels_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_panels>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_permissions = {
  readonly action: Scalars['String'];
  readonly collection: Scalars['String'];
  readonly fields: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly id: Scalars['ID'];
  readonly permissions: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly permissions_func: Maybe<DirectusSystemData_count_functions>;
  readonly presets: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly presets_func: Maybe<DirectusSystemData_count_functions>;
  readonly role: Maybe<DirectusSystemData_directus_roles>;
  readonly validation: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly validation_func: Maybe<DirectusSystemData_count_functions>;
};


type DirectusSystemData_directus_permissions_roleArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_permissions_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_permissions_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_permissions_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_permissions_aggregated_fields>;
};

type DirectusSystemData_directus_permissions_aggregated_count = {
  readonly action: Maybe<Scalars['Int']>;
  readonly collection: Maybe<Scalars['Int']>;
  readonly fields: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly permissions: Maybe<Scalars['Int']>;
  readonly presets: Maybe<Scalars['Int']>;
  readonly role: Maybe<Scalars['Int']>;
  readonly validation: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_permissions_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_permissions_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_permissions_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_permissions_filter>>>;
  readonly action: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly fields: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly permissions: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly permissions_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly presets: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly presets_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly role: InputMaybe<DirectusSystemData_directus_roles_filter>;
  readonly validation: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly validation_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
};

type DirectusSystemData_directus_permissions_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_permissions>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_presets = {
  readonly bookmark: Maybe<Scalars['String']>;
  readonly collection: Maybe<Scalars['String']>;
  readonly color: Maybe<Scalars['String']>;
  readonly filter: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly filter_func: Maybe<DirectusSystemData_count_functions>;
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly layout: Maybe<Scalars['String']>;
  readonly layout_options: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly layout_options_func: Maybe<DirectusSystemData_count_functions>;
  readonly layout_query: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly layout_query_func: Maybe<DirectusSystemData_count_functions>;
  readonly refresh_interval: Maybe<Scalars['Int']>;
  readonly role: Maybe<DirectusSystemData_directus_roles>;
  readonly search: Maybe<Scalars['String']>;
  readonly user: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_directus_presets_roleArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_presets_userArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_presets_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_presets_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_presets_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_presets_aggregated_fields>;
};

type DirectusSystemData_directus_presets_aggregated_count = {
  readonly bookmark: Maybe<Scalars['Int']>;
  readonly collection: Maybe<Scalars['Int']>;
  readonly color: Maybe<Scalars['Int']>;
  readonly filter: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly layout: Maybe<Scalars['Int']>;
  readonly layout_options: Maybe<Scalars['Int']>;
  readonly layout_query: Maybe<Scalars['Int']>;
  readonly refresh_interval: Maybe<Scalars['Int']>;
  readonly role: Maybe<Scalars['Int']>;
  readonly search: Maybe<Scalars['Int']>;
  readonly user: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_presets_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
  readonly refresh_interval: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_presets_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_presets_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_presets_filter>>>;
  readonly bookmark: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly color: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly filter: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly filter_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly icon: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly layout: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly layout_options: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly layout_options_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly layout_query: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly layout_query_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly refresh_interval: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly role: InputMaybe<DirectusSystemData_directus_roles_filter>;
  readonly search: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly user: InputMaybe<DirectusSystemData_directus_users_filter>;
};

type DirectusSystemData_directus_presets_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_presets>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_relations = {
  readonly collection: Maybe<Scalars['String']>;
  readonly field: Maybe<Scalars['String']>;
  readonly meta: Maybe<DirectusSystemData_directus_relations_meta>;
  readonly related_collection: Maybe<Scalars['String']>;
  readonly schema: Maybe<DirectusSystemData_directus_relations_schema>;
};

type DirectusSystemData_directus_relations_meta = {
  readonly id: Maybe<Scalars['Int']>;
  readonly junction_field: Maybe<Scalars['String']>;
  readonly many_collection: Maybe<Scalars['String']>;
  readonly many_field: Maybe<Scalars['String']>;
  readonly one_allowed_collections: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly one_collection: Maybe<Scalars['String']>;
  readonly one_collection_field: Maybe<Scalars['String']>;
  readonly one_deselect_action: Maybe<Scalars['String']>;
  readonly one_field: Maybe<Scalars['String']>;
  readonly sort_field: Maybe<Scalars['String']>;
};

type DirectusSystemData_directus_relations_meta_input = {
  readonly id: InputMaybe<Scalars['Int']>;
  readonly junction_field: InputMaybe<Scalars['String']>;
  readonly many_collection: InputMaybe<Scalars['String']>;
  readonly many_field: InputMaybe<Scalars['String']>;
  readonly one_allowed_collections: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly one_collection: InputMaybe<Scalars['String']>;
  readonly one_collection_field: InputMaybe<Scalars['String']>;
  readonly one_deselect_action: InputMaybe<Scalars['String']>;
  readonly one_field: InputMaybe<Scalars['String']>;
  readonly sort_field: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_directus_relations_schema = {
  readonly column: Scalars['String'];
  readonly constraint_name: Maybe<Scalars['String']>;
  readonly foreign_key_column: Scalars['String'];
  readonly foreign_key_table: Scalars['String'];
  readonly on_delete: Scalars['String'];
  readonly on_update: Scalars['String'];
  readonly table: Scalars['String'];
};

type DirectusSystemData_directus_relations_schema_input = {
  readonly column: Scalars['String'];
  readonly constraint_name: InputMaybe<Scalars['String']>;
  readonly foreign_key_column: Scalars['String'];
  readonly foreign_key_table: Scalars['String'];
  readonly on_delete: Scalars['String'];
  readonly on_update: Scalars['String'];
  readonly table: Scalars['String'];
};

type DirectusSystemData_directus_revisions = {
  readonly activity: Maybe<DirectusSystemData_directus_activity>;
  readonly collection: Scalars['String'];
  readonly data: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly data_func: Maybe<DirectusSystemData_count_functions>;
  readonly delta: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly delta_func: Maybe<DirectusSystemData_count_functions>;
  readonly id: Scalars['ID'];
  readonly item: Scalars['String'];
  readonly parent: Maybe<DirectusSystemData_directus_revisions>;
};


type DirectusSystemData_directus_revisions_activityArgs = {
  filter: InputMaybe<DirectusSystemData_directus_activity_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_revisions_parentArgs = {
  filter: InputMaybe<DirectusSystemData_directus_revisions_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_revisions_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_revisions_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_revisions_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_revisions_aggregated_fields>;
};

type DirectusSystemData_directus_revisions_aggregated_count = {
  readonly activity: Maybe<Scalars['Int']>;
  readonly collection: Maybe<Scalars['Int']>;
  readonly data: Maybe<Scalars['Int']>;
  readonly delta: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly item: Maybe<Scalars['Int']>;
  readonly parent: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_revisions_aggregated_fields = {
  readonly activity: Maybe<Scalars['Float']>;
  readonly id: Maybe<Scalars['Float']>;
  readonly parent: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_revisions_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_revisions_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_revisions_filter>>>;
  readonly activity: InputMaybe<DirectusSystemData_directus_activity_filter>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly data: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly data_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly delta: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly delta_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly item: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly parent: InputMaybe<DirectusSystemData_directus_revisions_filter>;
};

type DirectusSystemData_directus_revisions_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_revisions>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_roles = {
  readonly admin_access: Scalars['Boolean'];
  readonly app_access: Maybe<Scalars['Boolean']>;
  readonly description: Maybe<Scalars['String']>;
  readonly enforce_tfa: Scalars['Boolean'];
  readonly icon: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly ip_access: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly name: Scalars['String'];
  readonly users: Maybe<ReadonlyArray<Maybe<DirectusSystemData_directus_users>>>;
  readonly users_func: Maybe<DirectusSystemData_count_functions>;
};


type DirectusSystemData_directus_roles_usersArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_roles_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_roles_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_roles_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_roles_aggregated_count = {
  readonly admin_access: Maybe<Scalars['Int']>;
  readonly app_access: Maybe<Scalars['Int']>;
  readonly description: Maybe<Scalars['Int']>;
  readonly enforce_tfa: Maybe<Scalars['Int']>;
  readonly icon: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly ip_access: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly users: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_roles_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_roles_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_roles_filter>>>;
  readonly admin_access: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly app_access: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly description: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly enforce_tfa: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly icon: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly ip_access: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly users: InputMaybe<DirectusSystemData_directus_users_filter>;
  readonly users_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
};

type DirectusSystemData_directus_roles_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_roles>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_settings = {
  readonly auth_login_attempts: Maybe<Scalars['Int']>;
  readonly auth_password_policy: Maybe<Scalars['String']>;
  readonly basemaps: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly basemaps_func: Maybe<DirectusSystemData_count_functions>;
  readonly custom_aspect_ratios: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly custom_aspect_ratios_func: Maybe<DirectusSystemData_count_functions>;
  readonly custom_css: Maybe<Scalars['String']>;
  readonly default_language: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly mapbox_key: Maybe<Scalars['String']>;
  readonly module_bar: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly module_bar_func: Maybe<DirectusSystemData_count_functions>;
  /** $t:field_options.directus_settings.project_color_note */
  readonly project_color: Maybe<Scalars['String']>;
  readonly project_descriptor: Maybe<Scalars['String']>;
  readonly project_logo: Maybe<DirectusSystemData_directus_files>;
  readonly project_name: Maybe<Scalars['String']>;
  readonly project_url: Maybe<Scalars['String']>;
  readonly public_background: Maybe<DirectusSystemData_directus_files>;
  readonly public_foreground: Maybe<DirectusSystemData_directus_files>;
  readonly public_note: Maybe<Scalars['String']>;
  readonly storage_asset_presets: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly storage_asset_presets_func: Maybe<DirectusSystemData_count_functions>;
  readonly storage_asset_transform: Maybe<Scalars['String']>;
  readonly storage_default_folder: Maybe<DirectusSystemData_directus_folders>;
};


type DirectusSystemData_directus_settings_project_logoArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_settings_public_backgroundArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_settings_public_foregroundArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_settings_storage_default_folderArgs = {
  filter: InputMaybe<DirectusSystemData_directus_folders_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_settings_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_settings>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_shares = {
  readonly collection: Scalars['String'];
  readonly date_created: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_created_func: Maybe<DirectusSystemData_datetime_functions>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_end: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_end_func: Maybe<DirectusSystemData_datetime_functions>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_start: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly date_start_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly id: Scalars['ID'];
  readonly item: Scalars['String'];
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['String']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  readonly password: Maybe<Scalars['DirectusSystemData_Hash']>;
  readonly role: Maybe<DirectusSystemData_directus_roles>;
  readonly times_used: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<DirectusSystemData_directus_users>;
};


type DirectusSystemData_directus_shares_roleArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_shares_user_createdArgs = {
  filter: InputMaybe<DirectusSystemData_directus_users_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_shares_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_shares_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_shares_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_shares_aggregated_fields>;
};

type DirectusSystemData_directus_shares_aggregated_count = {
  readonly collection: Maybe<Scalars['Int']>;
  readonly date_created: Maybe<Scalars['Int']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_end: Maybe<Scalars['Int']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_start: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly item: Maybe<Scalars['Int']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  readonly password: Maybe<Scalars['Int']>;
  readonly role: Maybe<Scalars['Int']>;
  readonly times_used: Maybe<Scalars['Int']>;
  readonly user_created: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_shares_aggregated_fields = {
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: Maybe<Scalars['Float']>;
  readonly times_used: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_shares_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_shares_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_shares_filter>>>;
  readonly collection: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly date_created: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_created_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly date_end: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_end_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly date_start: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly date_start_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly item: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly max_uses: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly password: InputMaybe<DirectusSystemData_hash_filter_operators>;
  readonly role: InputMaybe<DirectusSystemData_directus_roles_filter>;
  readonly times_used: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly user_created: InputMaybe<DirectusSystemData_directus_users_filter>;
};

type DirectusSystemData_directus_shares_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_shares>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_translations = {
  readonly id: Scalars['ID'];
  readonly key: Scalars['String'];
  readonly language: Scalars['String'];
  readonly value: Scalars['String'];
};

type DirectusSystemData_directus_translations_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_translations_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_translations_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_translations_aggregated_count = {
  readonly id: Maybe<Scalars['Int']>;
  readonly key: Maybe<Scalars['Int']>;
  readonly language: Maybe<Scalars['Int']>;
  readonly value: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_translations_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_translations_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_translations_filter>>>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly key: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly language: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly value: InputMaybe<DirectusSystemData_string_filter_operators>;
};

type DirectusSystemData_directus_translations_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_translations>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_users = {
  readonly auth_data: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly auth_data_func: Maybe<DirectusSystemData_count_functions>;
  readonly avatar: Maybe<DirectusSystemData_directus_files>;
  readonly description: Maybe<Scalars['String']>;
  readonly email: Maybe<Scalars['String']>;
  readonly email_notifications: Maybe<Scalars['Boolean']>;
  readonly external_identifier: Maybe<Scalars['String']>;
  readonly first_name: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly language: Maybe<Scalars['String']>;
  readonly last_access: Maybe<Scalars['DirectusSystemData_Date']>;
  readonly last_access_func: Maybe<DirectusSystemData_datetime_functions>;
  readonly last_name: Maybe<Scalars['String']>;
  readonly last_page: Maybe<Scalars['String']>;
  readonly location: Maybe<Scalars['String']>;
  readonly password: Maybe<Scalars['DirectusSystemData_Hash']>;
  readonly provider: Maybe<Scalars['String']>;
  readonly role: Maybe<DirectusSystemData_directus_roles>;
  readonly status: Maybe<Scalars['String']>;
  readonly tags: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly tags_func: Maybe<DirectusSystemData_count_functions>;
  readonly tfa_secret: Maybe<Scalars['DirectusSystemData_Hash']>;
  readonly theme: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly token: Maybe<Scalars['DirectusSystemData_Hash']>;
};


type DirectusSystemData_directus_users_avatarArgs = {
  filter: InputMaybe<DirectusSystemData_directus_files_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};


type DirectusSystemData_directus_users_roleArgs = {
  filter: InputMaybe<DirectusSystemData_directus_roles_filter>;
  limit: InputMaybe<Scalars['Int']>;
  offset: InputMaybe<Scalars['Int']>;
  page: InputMaybe<Scalars['Int']>;
  search: InputMaybe<Scalars['String']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
};

type DirectusSystemData_directus_users_aggregated = {
  readonly count: Maybe<DirectusSystemData_directus_users_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_users_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_directus_users_aggregated_count = {
  readonly auth_data: Maybe<Scalars['Int']>;
  readonly avatar: Maybe<Scalars['Int']>;
  readonly description: Maybe<Scalars['Int']>;
  readonly email: Maybe<Scalars['Int']>;
  readonly email_notifications: Maybe<Scalars['Int']>;
  readonly external_identifier: Maybe<Scalars['Int']>;
  readonly first_name: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly language: Maybe<Scalars['Int']>;
  readonly last_access: Maybe<Scalars['Int']>;
  readonly last_name: Maybe<Scalars['Int']>;
  readonly last_page: Maybe<Scalars['Int']>;
  readonly location: Maybe<Scalars['Int']>;
  readonly password: Maybe<Scalars['Int']>;
  readonly provider: Maybe<Scalars['Int']>;
  readonly role: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['Int']>;
  readonly tags: Maybe<Scalars['Int']>;
  readonly tfa_secret: Maybe<Scalars['Int']>;
  readonly theme: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['Int']>;
  readonly token: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_users_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_users_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_users_filter>>>;
  readonly auth_data: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly auth_data_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly avatar: InputMaybe<DirectusSystemData_directus_files_filter>;
  readonly description: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly email: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly email_notifications: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly external_identifier: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly first_name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly language: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly last_access: InputMaybe<DirectusSystemData_date_filter_operators>;
  readonly last_access_func: InputMaybe<DirectusSystemData_datetime_function_filter_operators>;
  readonly last_name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly last_page: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly location: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly password: InputMaybe<DirectusSystemData_hash_filter_operators>;
  readonly provider: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly role: InputMaybe<DirectusSystemData_directus_roles_filter>;
  readonly status: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly tags: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly tags_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly tfa_secret: InputMaybe<DirectusSystemData_hash_filter_operators>;
  readonly theme: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly title: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly token: InputMaybe<DirectusSystemData_hash_filter_operators>;
};

type DirectusSystemData_directus_users_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_users>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_directus_webhooks = {
  readonly actions: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly collections: ReadonlyArray<Maybe<Scalars['String']>>;
  readonly data: Maybe<Scalars['Boolean']>;
  readonly headers: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly headers_func: Maybe<DirectusSystemData_count_functions>;
  readonly id: Scalars['ID'];
  readonly method: Maybe<Scalars['String']>;
  readonly name: Scalars['String'];
  readonly status: Maybe<Scalars['String']>;
  readonly url: Scalars['String'];
};

type DirectusSystemData_directus_webhooks_aggregated = {
  readonly avg: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
  readonly avgDistinct: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
  readonly count: Maybe<DirectusSystemData_directus_webhooks_aggregated_count>;
  readonly countAll: Maybe<Scalars['Int']>;
  readonly countDistinct: Maybe<DirectusSystemData_directus_webhooks_aggregated_count>;
  readonly group: Maybe<Scalars['DirectusSystemData_JSON']>;
  readonly max: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
  readonly min: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
  readonly sum: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
  readonly sumDistinct: Maybe<DirectusSystemData_directus_webhooks_aggregated_fields>;
};

type DirectusSystemData_directus_webhooks_aggregated_count = {
  readonly actions: Maybe<Scalars['Int']>;
  readonly collections: Maybe<Scalars['Int']>;
  readonly data: Maybe<Scalars['Int']>;
  readonly headers: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['Int']>;
  readonly method: Maybe<Scalars['Int']>;
  readonly name: Maybe<Scalars['Int']>;
  readonly status: Maybe<Scalars['Int']>;
  readonly url: Maybe<Scalars['Int']>;
};

type DirectusSystemData_directus_webhooks_aggregated_fields = {
  readonly id: Maybe<Scalars['Float']>;
};

type DirectusSystemData_directus_webhooks_filter = {
  readonly _and: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_webhooks_filter>>>;
  readonly _or: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_directus_webhooks_filter>>>;
  readonly actions: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly collections: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly data: InputMaybe<DirectusSystemData_boolean_filter_operators>;
  readonly headers: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly headers_func: InputMaybe<DirectusSystemData_count_function_filter_operators>;
  readonly id: InputMaybe<DirectusSystemData_number_filter_operators>;
  readonly method: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly name: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly status: InputMaybe<DirectusSystemData_string_filter_operators>;
  readonly url: InputMaybe<DirectusSystemData_string_filter_operators>;
};

type DirectusSystemData_directus_webhooks_mutated = {
  readonly data: Maybe<DirectusSystemData_directus_webhooks>;
  readonly event: Maybe<DirectusSystemData_EventEnum>;
  readonly key: Scalars['ID'];
};

type DirectusSystemData_extensions = {
  readonly displays: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly interfaces: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly layouts: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly modules: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
};

type DirectusSystemData_graphql_sdl_scope =
  | 'items'
  | 'system';

type DirectusSystemData_hash_filter_operators = {
  readonly _empty: InputMaybe<Scalars['Boolean']>;
  readonly _nempty: InputMaybe<Scalars['Boolean']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusSystemData_number_filter_operators = {
  readonly _between: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _eq: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _gt: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _gte: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _lt: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _lte: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _nbetween: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _neq: InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['DirectusSystemData_GraphQLStringOrFloat']>>>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
};

type DirectusSystemData_server_info = {
  readonly project: Maybe<DirectusSystemData_server_info_project>;
  readonly queryLimit: Maybe<DirectusSystemData_server_info_query_limit>;
  readonly rateLimit: Maybe<Scalars['Boolean']>;
  readonly rateLimitGlobal: Maybe<Scalars['Boolean']>;
  readonly websocket: Maybe<DirectusSystemData_server_info_websocket>;
};

type DirectusSystemData_server_info_project = {
  readonly custom_css: Maybe<Scalars['String']>;
  readonly default_language: Maybe<Scalars['String']>;
  readonly project_color: Maybe<Scalars['String']>;
  readonly project_descriptor: Maybe<Scalars['String']>;
  readonly project_logo: Maybe<Scalars['String']>;
  readonly project_name: Maybe<Scalars['String']>;
  readonly public_background: Maybe<Scalars['String']>;
  readonly public_foreground: Maybe<Scalars['String']>;
  readonly public_note: Maybe<Scalars['String']>;
};

type DirectusSystemData_server_info_query_limit = {
  readonly default: Maybe<Scalars['Int']>;
  readonly max: Maybe<Scalars['Int']>;
};

type DirectusSystemData_server_info_websocket = {
  readonly graphql: Maybe<DirectusSystemData_server_info_websocket_graphql>;
  readonly heartbeat: Maybe<Scalars['Int']>;
  readonly rest: Maybe<DirectusSystemData_server_info_websocket_rest>;
};

type DirectusSystemData_server_info_websocket_graphql = {
  readonly authentication: Maybe<DirectusSystemData_server_info_websocket_graphql_authentication>;
  readonly path: Maybe<Scalars['String']>;
};

type DirectusSystemData_server_info_websocket_graphql_authentication =
  | 'handshake'
  | 'public'
  | 'strict';

type DirectusSystemData_server_info_websocket_rest = {
  readonly authentication: Maybe<DirectusSystemData_server_info_websocket_rest_authentication>;
  readonly path: Maybe<Scalars['String']>;
};

type DirectusSystemData_server_info_websocket_rest_authentication =
  | 'handshake'
  | 'public'
  | 'strict';

type DirectusSystemData_string_filter_operators = {
  readonly _contains: InputMaybe<Scalars['String']>;
  readonly _empty: InputMaybe<Scalars['Boolean']>;
  readonly _ends_with: InputMaybe<Scalars['String']>;
  readonly _eq: InputMaybe<Scalars['String']>;
  readonly _icontains: InputMaybe<Scalars['String']>;
  readonly _iends_with: InputMaybe<Scalars['String']>;
  readonly _in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _istarts_with: InputMaybe<Scalars['String']>;
  readonly _ncontains: InputMaybe<Scalars['String']>;
  readonly _nempty: InputMaybe<Scalars['Boolean']>;
  readonly _nends_with: InputMaybe<Scalars['String']>;
  readonly _neq: InputMaybe<Scalars['String']>;
  readonly _niends_with: InputMaybe<Scalars['String']>;
  readonly _nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly _nistarts_with: InputMaybe<Scalars['String']>;
  readonly _nnull: InputMaybe<Scalars['Boolean']>;
  readonly _nstarts_with: InputMaybe<Scalars['String']>;
  readonly _null: InputMaybe<Scalars['Boolean']>;
  readonly _starts_with: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_update_directus_collections_input = {
  readonly meta: InputMaybe<DirectusSystemData_directus_collections_meta_input>;
};

type DirectusSystemData_update_directus_dashboards_input = {
  readonly color: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly note: InputMaybe<Scalars['String']>;
  readonly panels: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_update_directus_panels_input>>>;
  readonly user_created: InputMaybe<DirectusSystemData_update_directus_users_input>;
};

type DirectusSystemData_update_directus_fields_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly field: InputMaybe<Scalars['String']>;
  readonly meta: InputMaybe<DirectusSystemData_directus_fields_meta_input>;
  readonly schema: InputMaybe<DirectusSystemData_directus_fields_schema_input>;
  readonly type: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_update_directus_files_input = {
  readonly charset: InputMaybe<Scalars['String']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly duration: InputMaybe<Scalars['Int']>;
  readonly embed: InputMaybe<Scalars['String']>;
  readonly filename_disk: InputMaybe<Scalars['String']>;
  readonly filename_download: InputMaybe<Scalars['String']>;
  readonly filesize: InputMaybe<Scalars['DirectusSystemData_GraphQLBigInt']>;
  readonly folder: InputMaybe<DirectusSystemData_update_directus_folders_input>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly metadata: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly modified_by: InputMaybe<DirectusSystemData_update_directus_users_input>;
  readonly modified_on: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly storage: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly uploaded_by: InputMaybe<DirectusSystemData_update_directus_users_input>;
  readonly uploaded_on: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type DirectusSystemData_update_directus_flows_input = {
  readonly accountability: InputMaybe<Scalars['String']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly operation: InputMaybe<DirectusSystemData_update_directus_operations_input>;
  readonly operations: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_update_directus_operations_input>>>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly trigger: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusSystemData_update_directus_users_input>;
};

type DirectusSystemData_update_directus_folders_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly parent: InputMaybe<DirectusSystemData_update_directus_folders_input>;
};

type DirectusSystemData_update_directus_notifications_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly item: InputMaybe<Scalars['String']>;
  readonly message: InputMaybe<Scalars['String']>;
  readonly recipient: InputMaybe<DirectusSystemData_update_directus_users_input>;
  readonly sender: InputMaybe<DirectusSystemData_update_directus_users_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly subject: InputMaybe<Scalars['String']>;
  readonly timestamp: InputMaybe<Scalars['DirectusSystemData_Date']>;
};

type DirectusSystemData_update_directus_operations_input = {
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly flow: InputMaybe<DirectusSystemData_update_directus_flows_input>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly key: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly position_x: InputMaybe<Scalars['Int']>;
  readonly position_y: InputMaybe<Scalars['Int']>;
  readonly reject: InputMaybe<DirectusSystemData_update_directus_operations_input>;
  readonly resolve: InputMaybe<DirectusSystemData_update_directus_operations_input>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusSystemData_update_directus_users_input>;
};

type DirectusSystemData_update_directus_panels_input = {
  readonly color: InputMaybe<Scalars['String']>;
  readonly dashboard: InputMaybe<DirectusSystemData_update_directus_dashboards_input>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly height: InputMaybe<Scalars['Int']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly note: InputMaybe<Scalars['String']>;
  readonly options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly position_x: InputMaybe<Scalars['Int']>;
  readonly position_y: InputMaybe<Scalars['Int']>;
  readonly show_header: InputMaybe<Scalars['Boolean']>;
  readonly type: InputMaybe<Scalars['String']>;
  readonly user_created: InputMaybe<DirectusSystemData_update_directus_users_input>;
  readonly width: InputMaybe<Scalars['Int']>;
};

type DirectusSystemData_update_directus_permissions_input = {
  readonly action: InputMaybe<Scalars['String']>;
  readonly collection: InputMaybe<Scalars['String']>;
  readonly fields: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly permissions: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly presets: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly role: InputMaybe<DirectusSystemData_update_directus_roles_input>;
  readonly validation: InputMaybe<Scalars['DirectusSystemData_JSON']>;
};

type DirectusSystemData_update_directus_presets_input = {
  readonly bookmark: InputMaybe<Scalars['String']>;
  readonly collection: InputMaybe<Scalars['String']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly filter: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly layout: InputMaybe<Scalars['String']>;
  readonly layout_options: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly layout_query: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly refresh_interval: InputMaybe<Scalars['Int']>;
  readonly role: InputMaybe<DirectusSystemData_update_directus_roles_input>;
  readonly search: InputMaybe<Scalars['String']>;
  readonly user: InputMaybe<DirectusSystemData_update_directus_users_input>;
};

type DirectusSystemData_update_directus_relations_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly field: InputMaybe<Scalars['String']>;
  readonly meta: InputMaybe<DirectusSystemData_directus_relations_meta_input>;
  readonly related_collection: InputMaybe<Scalars['String']>;
  readonly schema: InputMaybe<DirectusSystemData_directus_relations_schema_input>;
};

type DirectusSystemData_update_directus_roles_input = {
  readonly admin_access: InputMaybe<Scalars['Boolean']>;
  readonly app_access: InputMaybe<Scalars['Boolean']>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly enforce_tfa: InputMaybe<Scalars['Boolean']>;
  readonly icon: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly ip_access: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly users: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemData_update_directus_users_input>>>;
};

type DirectusSystemData_update_directus_settings_input = {
  readonly auth_login_attempts: InputMaybe<Scalars['Int']>;
  readonly auth_password_policy: InputMaybe<Scalars['String']>;
  readonly basemaps: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly custom_aspect_ratios: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly custom_css: InputMaybe<Scalars['String']>;
  readonly default_language: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly mapbox_key: InputMaybe<Scalars['String']>;
  readonly module_bar: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  /** $t:field_options.directus_settings.project_color_note */
  readonly project_color: InputMaybe<Scalars['String']>;
  readonly project_descriptor: InputMaybe<Scalars['String']>;
  readonly project_logo: InputMaybe<DirectusSystemData_update_directus_files_input>;
  readonly project_name: InputMaybe<Scalars['String']>;
  readonly project_url: InputMaybe<Scalars['String']>;
  readonly public_background: InputMaybe<DirectusSystemData_update_directus_files_input>;
  readonly public_foreground: InputMaybe<DirectusSystemData_update_directus_files_input>;
  readonly public_note: InputMaybe<Scalars['String']>;
  readonly storage_asset_presets: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly storage_asset_transform: InputMaybe<Scalars['String']>;
  readonly storage_default_folder: InputMaybe<DirectusSystemData_update_directus_folders_input>;
};

type DirectusSystemData_update_directus_shares_input = {
  readonly collection: InputMaybe<Scalars['String']>;
  readonly date_created: InputMaybe<Scalars['DirectusSystemData_Date']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_end: InputMaybe<Scalars['DirectusSystemData_Date']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly date_start: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly item: InputMaybe<Scalars['String']>;
  /** $t:shared_leave_blank_for_unlimited */
  readonly max_uses: InputMaybe<Scalars['Int']>;
  readonly name: InputMaybe<Scalars['String']>;
  /** $t:shared_leave_blank_for_passwordless_access */
  readonly password: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly role: InputMaybe<DirectusSystemData_update_directus_roles_input>;
  readonly times_used: InputMaybe<Scalars['Int']>;
  readonly user_created: InputMaybe<DirectusSystemData_update_directus_users_input>;
};

type DirectusSystemData_update_directus_translations_input = {
  readonly id: InputMaybe<Scalars['ID']>;
  readonly key: InputMaybe<Scalars['String']>;
  readonly language: InputMaybe<Scalars['String']>;
  readonly value: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_update_directus_users_input = {
  readonly auth_data: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly avatar: InputMaybe<DirectusSystemData_update_directus_files_input>;
  readonly description: InputMaybe<Scalars['String']>;
  readonly email: InputMaybe<Scalars['String']>;
  readonly email_notifications: InputMaybe<Scalars['Boolean']>;
  readonly external_identifier: InputMaybe<Scalars['String']>;
  readonly first_name: InputMaybe<Scalars['String']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly language: InputMaybe<Scalars['String']>;
  readonly last_access: InputMaybe<Scalars['DirectusSystemData_Date']>;
  readonly last_name: InputMaybe<Scalars['String']>;
  readonly last_page: InputMaybe<Scalars['String']>;
  readonly location: InputMaybe<Scalars['String']>;
  readonly password: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly provider: InputMaybe<Scalars['String']>;
  readonly role: InputMaybe<DirectusSystemData_update_directus_roles_input>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly tags: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly tfa_secret: InputMaybe<Scalars['DirectusSystemData_Hash']>;
  readonly theme: InputMaybe<Scalars['String']>;
  readonly title: InputMaybe<Scalars['String']>;
  readonly token: InputMaybe<Scalars['DirectusSystemData_Hash']>;
};

type DirectusSystemData_update_directus_webhooks_input = {
  readonly actions: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly collections: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly data: InputMaybe<Scalars['Boolean']>;
  readonly headers: InputMaybe<Scalars['DirectusSystemData_JSON']>;
  readonly id: InputMaybe<Scalars['ID']>;
  readonly method: InputMaybe<Scalars['String']>;
  readonly name: InputMaybe<Scalars['String']>;
  readonly status: InputMaybe<Scalars['String']>;
  readonly url: InputMaybe<Scalars['String']>;
};

type DirectusSystemData_users_me_tfa_generate_data = {
  readonly otpauth_url: Maybe<Scalars['String']>;
  readonly secret: Maybe<Scalars['String']>;
};

type DirectusSystemGraphQLSource = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fieldName: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly typeName: Maybe<Scalars['String']>;
};

type DirectusSystemGraphQLSourceConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectusSystemGraphQLSourceEdge>;
  readonly group: ReadonlyArray<DirectusSystemGraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<DirectusSystemGraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectusSystemGraphQLSourceConnection_distinctArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceConnection_groupArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectusSystemGraphQLSourceConnection_maxArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceConnection_minArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceConnection_sumArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};

type DirectusSystemGraphQLSourceEdge = {
  readonly next: Maybe<DirectusSystemGraphQLSource>;
  readonly node: DirectusSystemGraphQLSource;
  readonly previous: Maybe<DirectusSystemGraphQLSource>;
};

type DirectusSystemGraphQLSourceFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fieldName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly typeName: InputMaybe<FieldSelectorEnum>;
};

type DirectusSystemGraphQLSourceFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fieldName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly typeName: InputMaybe<StringQueryOperatorInput>;
};

type DirectusSystemGraphQLSourceGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectusSystemGraphQLSourceEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectusSystemGraphQLSourceGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<DirectusSystemGraphQLSource>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectusSystemGraphQLSourceGroupConnection_distinctArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceGroupConnection_groupArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectusSystemGraphQLSourceGroupConnection_maxArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceGroupConnection_minArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};


type DirectusSystemGraphQLSourceGroupConnection_sumArgs = {
  field: DirectusSystemGraphQLSourceFieldSelector;
};

type DirectusSystemGraphQLSourceSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fieldName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly typeName: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allDirectusGraphQlSource: DirectusGraphQLSourceConnection;
  readonly allDirectusSystemGraphQlSource: DirectusSystemGraphQLSourceConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly directus: DirectusData;
  readonly directusGraphQlSource: Maybe<DirectusGraphQLSource>;
  readonly directusSystemGraphQlSource: Maybe<DirectusSystemGraphQLSource>;
  readonly directus_system: DirectusSystemData;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allDirectusGraphQlSourceArgs = {
  filter: InputMaybe<DirectusGraphQLSourceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectusGraphQLSourceSortInput>>>;
};


type Query_allDirectusSystemGraphQlSourceArgs = {
  filter: InputMaybe<DirectusSystemGraphQLSourceFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectusSystemGraphQLSourceSortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_directusGraphQlSourceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fieldName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  typeName: InputMaybe<StringQueryOperatorInput>;
};


type Query_directusSystemGraphQlSourceArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fieldName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  typeName: InputMaybe<StringQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly author: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly author: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly author: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly author: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };


}
